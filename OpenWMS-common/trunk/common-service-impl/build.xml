<?xml version = "1.0" encoding="ISO-8859-1" ?>
<!-- 
 * OpenWMS, the open Warehouse Management System
 * 
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
-->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="OpenWMS-common-Spring" default="all" basedir=".">
    <tstamp>
        <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss 'GMT'Z" />
    </tstamp>

    <property environment="env" />
    <property file="build.properties" />

    <property name="bundle.version" value="1.0"/>
	<property name="bundle.symbolicName" value="org.openwms.common.ServiceImpl"/>
	<property name="bundle.name" value="OpenWMS Common Spring Service Implementation"/>
	<property name="bundle.vendor" value="openwms.org"/>
	<property name="bundle.manifestVersion" value="2"/>

    <path id="class.path">
        <fileset dir="${openwms_tms.dist.dir}">
            <include name="**/OpenWMS-tms.jar" />
        </fileset>
        <fileset dir="${openwms_common.dist.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${openwms_services.dist.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${deps.dir}/build">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${deps.dir}/test">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="project.deps.path">
        <fileset dir="${openwms_tms.dist.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${openwms_common.dist.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${openwms_services.dist.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

	<!-- All non java files in the src directory -->
	<patternset id="all.nonjava.files">
		<include name="**/*.txt"/>
		<include name="**/*.xml"/>
		<include name="**/*.dtd"/>
		<include name="**/*.properties"/>
	</patternset>

	<!-- Filters -->
	<filter token="version" value="${project.version}"/>

    <target name="deps">
        <echo message="************************************************" />
        <echo message="Resolve dependencies..." />
        <echo message="************************************************" />
        <path id="ivy.path">
			<fileset dir="${lib.dir}/ivy" includes="**/*.jar" />
		</path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.path" />
        <ivy:configure file="${ivy.settings.file}" />
        <ivy:resolve file="${ivy.dep.file}" conf="build, test" />
        <ivy:retrieve pattern="${deps.dir}/[conf]/[artifact]-[revision].[ext]"/>
    </target>

    <target name="deps-clean">
        <echo message="************************************************" />
        <echo message="Clear dependencies..." />
        <echo message="************************************************" />
        <delete>
            <fileset dir="${deps.test.dir}">
                <include name="**/*" />
            </fileset>
        </delete>
        <delete>
            <fileset dir="${deps.build.dir}">
                <include name="**/*" />
            </fileset>
        </delete>
        <antcall target="deps" />
    </target>

    <target name="initialize">
        <echo message="************************************************" />
        <echo message="Remove and create directories..." />
        <echo message="************************************************" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${junit.reports.dir}"/>
        <mkdir dir="${build.main.dir}" />
        <mkdir dir="${build.main.dir}/META-INF" />
        <mkdir dir="${build.test.dir}" />
        <mkdir dir="${build.test.dir}/META-INF" />
    </target>

    <target name="compile" depends="initialize">
        <echo message="************************************************" />
        <echo message="Compile sources in ${src.dir}..." />
        <echo message="************************************************" />
        <javac destdir="${build.main.dir}" classpathref="class.path" debug="on" deprecation="on">
            <src path="${src.dir}" />
        </javac>
        <copy todir="${build.main.dir}">
            <fileset dir="${src.dir}">
                <patternset refid="all.nonjava.files" />
            </fileset>
        </copy>
        <copy tofile="${build.main.dir}/META-INF/persistence.xml" file="${src.meta-inf.dir}/persistence.xml"/>
    </target>


    <target name="compile-tests" depends="compile">
        <echo message="************************************************" />
        <echo message="Compile sources in ${testsrc.dir}..." />
        <echo message="************************************************" />
        <javac destdir="${build.test.dir}" debug="on" deprecation="on" >
            <classpath>
                <pathelement location="${build.main.dir}"/>
                <path refid="class.path" />
                <fileset dir="${deps.dir}/build">
                    <include name="*.jar" />
                </fileset>
                <fileset dir="${deps.dir}/test">
                    <include name="*.jar" />
                </fileset>
            </classpath>
            <src path="${testsrc.dir}" />
        </javac>
		<copy todir="${build.test.dir}">
			<fileset dir="${testsrc.dir}">
				<patternset refid="all.nonjava.files"/>
			</fileset>
		</copy>
    </target>

    <!-- ********************************* TESTS & REPORTS ********************************* -->
	<target name="junit" depends="compile">
        <echo message="************************************************" />
        <echo message="Running unit tests..." />
        <echo message="************************************************" />
        <junit printsummary="on" fork="true" failureproperty="failed" dir="." maxmemory="512m">
            <sysproperty key="exec.longrunning.tests" value="true" />

            <formatter type="xml" />

            <classpath>
                <path refid="class.path" />
                <pathelement location="${build.main.dir}"/>
                <pathelement location="${build.test.dir}"/>
            </classpath>

            <batchtest fork="yes" todir="${java.io.tmpdir}">
                <fileset dir="${build.test.dir}">
                    <include name="**/*Test.class" />
                </fileset>
            </batchtest>
        </junit>
	    <mkdir dir="${junit.reports.html.dir}"/>
	    <mkdir dir="${junit.reports.xml.dir}"/>
	    <junitreport todir="${junit.reports.xml.dir}">
			<fileset dir="${java.io.tmpdir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${junit.reports.html.dir}"/>
	    </junitreport>
        <fail if="failed" message="One or more unit test have failed!" />
    </target>
    
	<path id="cobertura.classpath">
		<fileset dir="${deps.test.dir}">
			<include name="**/*.jar" />
        </fileset>
		<fileset dir="${deps.build.dir}">
			<include name="**/*.jar" />
        </fileset>
	</path>
    
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

    <target name="instrument" depends="compile-tests">
		<cobertura-instrument todir="${cobertura.instrumented.dir}" datafile="${cobertura.ser.file}">
			<fileset dir="${build.main.dir}">
				<include name="**/*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>
    
	<target name="cover-test" depends="instrument">
		<junit dir="." failureproperty="test.failure" printsummary="yes" fork="true" haltonerror="false" maxmemory="512m">
            <sysproperty key="exec.longrunning.tests" value="true" />
		    <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.ser.file}" />

		    <formatter type="xml" />

            <classpath>
                <pathelement path="${build.test.dir}"/>
                <pathelement path="${cobertura.instrumented.dir}" />
                <pathelement path="${build.main.dir}"/>
                <path refid="cobertura.classpath"/>
                <path refid="project.deps.path" />
            </classpath>

		    <batchtest fork="yes" todir="${java.io.tmpdir}">
                <fileset dir="${build.test.dir}">
                    <include name="**/*Test.class" />
                </fileset>
            </batchtest>
		</junit>
	    <mkdir dir="${junit.reports.html.dir}"/>
	    <mkdir dir="${junit.reports.xml.dir}"/>
	    <junitreport todir="${junit.reports.xml.dir}">
			<fileset dir="${java.io.tmpdir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${junit.reports.html.dir}"/>
	    </junitreport>
        <delete>
			<fileset dir="${java.io.tmpdir}">
				<include name="TEST-*.xml"/>
			</fileset>
        </delete>
        <fail if="test.failure" message="One or more unit test have failed!" />
 	</target>
      
	<!-- run this target to generate the coverage reports -->
	<target name="coverage-report" depends="cover-test">
        <delete dir="${cobertura.reports.coveragereport.dir}" failonerror="no"/>
        <mkdir dir="${cobertura.reports.coveragereport.dir}"/>
		<cobertura-report srcdir="${src.dir}" destdir="${cobertura.reports.coveragereport.dir}" datafile="${cobertura.ser.file}"/>
        <delete dir="${cobertura.instrumented.dir}" failonerror="no"/>
	    <delete file="${cobertura.ser.file}" />
 	</target>

    <target name="jar">
        <echo message="************************************************" />
        <echo message="Create jar file ${dist.dir}/${jar.file}..." />
        <echo message="************************************************" />
        <jar destfile="${dist.dir}/${jar.file}">
            <fileset dir="${build.main.dir}" />
            <manifest>
                <attribute name="Main-Class" value="" />
                <attribute name="Class-Path" value="." />
            </manifest>
        </jar>
    </target>

    <target name="jar-osgi">
        <echo message="************************************************" />
        <echo message="Create OSGi compliant jar file ${dist.dir}/${osgi-jar.file}..." />
        <echo message="************************************************" />
        <jar destfile="${dist.dir}/${osgi-jar.file}">
            <fileset dir="${build.main.dir}" />
            <manifest>
				<attribute name="Bundle-Version" value="${bundle.version}" />
				<attribute name="Bundle-SymbolicName" value="${bundle.symbolicName}" />
				<attribute name="Bundle-Name" value="${bundle.name}" />
				<attribute name="Bundle-Vendor" value="${bundle.vendor}" />
				<attribute name="Export-Package"  value="${osgi.export-package}" />
				<attribute name="Bundle-ManifestVersion" value="${bundle.manifestVersion}" />
            </manifest>
        </jar>
    </target>

    <target name="clean">
        <echo message="************************************************" />
        <echo message="Clean" />
        <echo message="************************************************" />
        <delete dir="${cobertura.reports.coveragereport.dir}" failonerror="no"/>
        <delete dir="${build.main.dir}" />
        <delete dir="${build.test.dir}" />
        <delete dir="${cobertura.instrumented.dir}" failonerror="no" />
        <delete dir="${junit.reports.dir}" failonerror="no"/>
    </target>

    <target name="build" depends="clean, initialize, compile, jar">
        <echo message="************************************************" />
        <echo message="Building..." />
        <echo message="************************************************" />
    </target>
    <target name="build-osgi" depends="clean, initialize, compile, jar-osgi">
        <echo message="************************************************" />
        <echo message="Building OSGi bundle..." />
        <echo message="************************************************" />
    </target>
    <target name="nightly" depends="clean, initialize, deps, compile, compile-tests, coverage-report, jar">
        <echo message="************************************************" />
        <echo message="Building nightly build" />
        <echo message="************************************************" />
    </target>

    <target name="check-env" >
        <property name="common_var" value="$${env.OPENWMS_COMMON}" />
        <property name="servicesapi_var" value="$${env.OPENWMS_SERVICESAPI}" />
        <condition property="home-set">
	    <and>
		<not>
			<equals arg1="${servicesapi_var}" arg2="${env.OPENWMS_SERVICESAPI}"/>
		</not>
		<not>
			<equals arg1="${common_var}" arg2="${env.OPENWMS_COMMON}"/>
		</not>
	    </and>
        </condition>
    </target>

    <target name="usage" depends="check-env" unless="home-set">
        <echo message="*************************************************************************************" />
        <echo message="Environment variable OPENWMS_COMMON must point to the main OpenWMS-commons checkout" />
		<echo message="directory." />
        <echo message="Environment variable OPENWMS_SERVICESAPI must point to the main OpenWMS-Services" />
		<echo message="checkout directory." />
        <echo message="" />
        <echo message="( try: export OPENWMS_COMMON=../../ )" />
        <echo message="( try: export OPENWMS_SERVICESAPI=../../ )" />
        <echo message="*************************************************************************************" />
        <fail/>
    </target>
    
    <target name="all" depends="usage">
        <antcall target="usage" />
        <ant antfile="${env.OPENWMS_COMMON}/build.xml" inheritall="false" target="all"/>
        <ant antfile="${env.OPENWMS_SERVICESAPI}/build.xml" inheritall="false" target="all"/>
        <antcall target="nightly" />
    </target>
</project>