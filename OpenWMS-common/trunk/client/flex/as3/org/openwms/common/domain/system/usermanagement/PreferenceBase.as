/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (Preference.as).
 */

package org.openwms.common.domain.system.usermanagement {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.collections.ListCollectionView;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class PreferenceBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _description:String;
        private var _floatValue:Number;
        private var _id:Number;
        private var _key:String;
        private var _maximum:int;
        private var _minimum:int;
        private var _roles:ListCollectionView;
        private var _type:String;
        private var _value:String;
        private var _version:Number;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is Preference) || (property as Preference).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
            _em = em;
        }

        public function set description(value:String):void {
            _description = value;
        }
        public function get description():String {
            return _description;
        }

        public function set floatValue(value:Number):void {
            _floatValue = value;
        }
        public function get floatValue():Number {
            return _floatValue;
        }

        public function get id():Number {
            return _id;
        }

        public function set key(value:String):void {
            _key = value;
        }
        public function get key():String {
            return _key;
        }

        public function set maximum(value:int):void {
            _maximum = value;
        }
        public function get maximum():int {
            return _maximum;
        }

        public function set minimum(value:int):void {
            _minimum = value;
        }
        public function get minimum():int {
            return _minimum;
        }

        public function set roles(value:ListCollectionView):void {
            _roles = value;
        }
        public function get roles():ListCollectionView {
            return _roles;
        }

        public function set type(value:String):void {
            _type = value;
        }
        public function get type():String {
            return _type;
        }

        public function set value(value:String):void {
            _value = value;
        }
        public function get value():String {
            return _value;
        }

        [Version]
        public function get version():Number {
            return _version;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
        	if (isNaN(_id))
        		return UIDUtil.createUID();
        	return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        	
        }

        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:PreferenceBase = PreferenceBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._description, _description, null, this, 'description', function setter(o:*):void{_description = o as String});
               em.meta_mergeExternal(src._floatValue, _floatValue, null, this, 'floatValue', function setter(o:*):void{_floatValue = o as Number});
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
               em.meta_mergeExternal(src._key, _key, null, this, 'key', function setter(o:*):void{_key = o as String});
               em.meta_mergeExternal(src._maximum, _maximum, null, this, 'maximum', function setter(o:*):void{_maximum = o as int});
               em.meta_mergeExternal(src._minimum, _minimum, null, this, 'minimum', function setter(o:*):void{_minimum = o as int});
               em.meta_mergeExternal(src._roles, _roles, null, this, 'roles', function setter(o:*):void{_roles = o as ListCollectionView});
               em.meta_mergeExternal(src._type, _type, null, this, 'type', function setter(o:*):void{_type = o as String});
               em.meta_mergeExternal(src._value, _value, null, this, 'value', function setter(o:*):void{_value = o as String});
               em.meta_mergeExternal(src._version, _version, null, this, 'version', function setter(o:*):void{_version = o as Number});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _description = input.readObject() as String;
                _floatValue = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _key = input.readObject() as String;
                _maximum = input.readObject() as int;
                _minimum = input.readObject() as int;
                _roles = input.readObject() as ListCollectionView;
                _type = input.readObject() as String;
                _value = input.readObject() as String;
                _version = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) {
                output.writeObject((_description is IPropertyHolder) ? IPropertyHolder(_description).object : _description);
                output.writeObject((_floatValue is IPropertyHolder) ? IPropertyHolder(_floatValue).object : _floatValue);
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
                output.writeObject((_key is IPropertyHolder) ? IPropertyHolder(_key).object : _key);
                output.writeObject((_maximum is IPropertyHolder) ? IPropertyHolder(_maximum).object : _maximum);
                output.writeObject((_minimum is IPropertyHolder) ? IPropertyHolder(_minimum).object : _minimum);
                output.writeObject((_roles is IPropertyHolder) ? IPropertyHolder(_roles).object : _roles);
                output.writeObject((_type is IPropertyHolder) ? IPropertyHolder(_type).object : _type);
                output.writeObject((_value is IPropertyHolder) ? IPropertyHolder(_value).object : _value);
                output.writeObject((_version is IPropertyHolder) ? IPropertyHolder(_version).object : _version);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
