/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (LocationGroup.as).
 */

package org.openwms.common.domain {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.collections.ListCollectionView;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;
    import org.granite.util.Enum;

    use namespace meta;

    [Managed]
    public class LocationGroupBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _description:String;
        private var _groupStateIn:LocationGroup$STATE;
        private var _groupStateOut:LocationGroup$STATE;
        private var _groupType:String;
        private var _id:Number;
        private var _lastUpdated:Date;
        private var _locationGroupCountingActive:Boolean;
        private var _locationGroups:ListCollectionView;
        private var _locations:ListCollectionView;
        private var _maxFillLevel:Number;
        private var _name:String;
        private var _noLocations:int;
        private var _parent:LocationGroup;
        private var _systemCode:String;
        private var _version:Number;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is LocationGroup) || (property as LocationGroup).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
            _em = em;
        }

        public function set description(value:String):void {
            _description = value;
        }
        public function get description():String {
            return _description;
        }

        public function set groupStateIn(value:LocationGroup$STATE):void {
            _groupStateIn = value;
        }
        public function get groupStateIn():LocationGroup$STATE {
            return _groupStateIn;
        }

        public function set groupStateOut(value:LocationGroup$STATE):void {
            _groupStateOut = value;
        }
        public function get groupStateOut():LocationGroup$STATE {
            return _groupStateOut;
        }

        public function set groupType(value:String):void {
            _groupType = value;
        }
        public function get groupType():String {
            return _groupType;
        }

        public function get id():Number {
            return _id;
        }

        public function set lastUpdated(value:Date):void {
            _lastUpdated = value;
        }
        public function get lastUpdated():Date {
            return _lastUpdated;
        }

        public function set locationGroupCountingActive(value:Boolean):void {
            _locationGroupCountingActive = value;
        }
        public function get locationGroupCountingActive():Boolean {
            return _locationGroupCountingActive;
        }

        public function get locationGroups():ListCollectionView {
            return _locationGroups;
        }

        public function get locations():ListCollectionView {
            return _locations;
        }

        public function set maxFillLevel(value:Number):void {
            _maxFillLevel = value;
        }
        public function get maxFillLevel():Number {
            return _maxFillLevel;
        }

        public function get name():String {
            return _name;
        }

        public function get noLocations():int {
            return _noLocations;
        }

        public function set parent(value:LocationGroup):void {
            _parent = value;
        }
        public function get parent():LocationGroup {
            return _parent;
        }

        public function set systemCode(value:String):void {
            _systemCode = value;
        }
        public function get systemCode():String {
            return _systemCode;
        }

        [Version]
        public function get version():Number {
            return _version;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
        	if (isNaN(_id))
        		return UIDUtil.createUID();
        	return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        	
        }

        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:LocationGroupBase = LocationGroupBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._description, _description, null, this, 'description', function setter(o:*):void{_description = o as String});
               em.meta_mergeExternal(src._groupStateIn, _groupStateIn, null, this, 'groupStateIn', function setter(o:*):void{_groupStateIn = o as LocationGroup$STATE});
               em.meta_mergeExternal(src._groupStateOut, _groupStateOut, null, this, 'groupStateOut', function setter(o:*):void{_groupStateOut = o as LocationGroup$STATE});
               em.meta_mergeExternal(src._groupType, _groupType, null, this, 'groupType', function setter(o:*):void{_groupType = o as String});
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
               em.meta_mergeExternal(src._lastUpdated, _lastUpdated, null, this, 'lastUpdated', function setter(o:*):void{_lastUpdated = o as Date});
               em.meta_mergeExternal(src._locationGroupCountingActive, _locationGroupCountingActive, null, this, 'locationGroupCountingActive', function setter(o:*):void{_locationGroupCountingActive = o as Boolean});
               em.meta_mergeExternal(src._locationGroups, _locationGroups, null, this, 'locationGroups', function setter(o:*):void{_locationGroups = o as ListCollectionView});
               em.meta_mergeExternal(src._locations, _locations, null, this, 'locations', function setter(o:*):void{_locations = o as ListCollectionView});
               em.meta_mergeExternal(src._maxFillLevel, _maxFillLevel, null, this, 'maxFillLevel', function setter(o:*):void{_maxFillLevel = o as Number});
               em.meta_mergeExternal(src._name, _name, null, this, 'name', function setter(o:*):void{_name = o as String});
               em.meta_mergeExternal(src._noLocations, _noLocations, null, this, 'noLocations', function setter(o:*):void{_noLocations = o as int});
               em.meta_mergeExternal(src._parent, _parent, null, this, 'parent', function setter(o:*):void{_parent = o as LocationGroup});
               em.meta_mergeExternal(src._systemCode, _systemCode, null, this, 'systemCode', function setter(o:*):void{_systemCode = o as String});
               em.meta_mergeExternal(src._version, _version, null, this, 'version', function setter(o:*):void{_version = o as Number});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _description = input.readObject() as String;
                _groupStateIn = Enum.readEnum(input) as LocationGroup$STATE;
                _groupStateOut = Enum.readEnum(input) as LocationGroup$STATE;
                _groupType = input.readObject() as String;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _lastUpdated = input.readObject() as Date;
                _locationGroupCountingActive = input.readObject() as Boolean;
                _locationGroups = input.readObject() as ListCollectionView;
                _locations = input.readObject() as ListCollectionView;
                _maxFillLevel = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _name = input.readObject() as String;
                _noLocations = input.readObject() as int;
                _parent = input.readObject() as LocationGroup;
                _systemCode = input.readObject() as String;
                _version = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) {
                output.writeObject((_description is IPropertyHolder) ? IPropertyHolder(_description).object : _description);
                output.writeObject((_groupStateIn is IPropertyHolder) ? IPropertyHolder(_groupStateIn).object : _groupStateIn);
                output.writeObject((_groupStateOut is IPropertyHolder) ? IPropertyHolder(_groupStateOut).object : _groupStateOut);
                output.writeObject((_groupType is IPropertyHolder) ? IPropertyHolder(_groupType).object : _groupType);
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
                output.writeObject((_lastUpdated is IPropertyHolder) ? IPropertyHolder(_lastUpdated).object : _lastUpdated);
                output.writeObject((_locationGroupCountingActive is IPropertyHolder) ? IPropertyHolder(_locationGroupCountingActive).object : _locationGroupCountingActive);
                output.writeObject((_locationGroups is IPropertyHolder) ? IPropertyHolder(_locationGroups).object : _locationGroups);
                output.writeObject((_locations is IPropertyHolder) ? IPropertyHolder(_locations).object : _locations);
                output.writeObject((_maxFillLevel is IPropertyHolder) ? IPropertyHolder(_maxFillLevel).object : _maxFillLevel);
                output.writeObject((_name is IPropertyHolder) ? IPropertyHolder(_name).object : _name);
                output.writeObject((_noLocations is IPropertyHolder) ? IPropertyHolder(_noLocations).object : _noLocations);
                output.writeObject((_parent is IPropertyHolder) ? IPropertyHolder(_parent).object : _parent);
                output.writeObject((_systemCode is IPropertyHolder) ? IPropertyHolder(_systemCode).object : _systemCode);
                output.writeObject((_version is IPropertyHolder) ? IPropertyHolder(_version).object : _version);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
