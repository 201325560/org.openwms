/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (TypePlacingRule.as).
 */

package org.openwms.common.domain {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class TypePlacingRuleBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _allowedLocationType:LocationType;
        private var _id:Number;
        private var _privilegeLevel:int;
        private var _transportUnitType:TransportUnitType;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is TypePlacingRule) || (property as TypePlacingRule).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
            _em = em;
        }

        public function get allowedLocationType():LocationType {
            return _allowedLocationType;
        }

        public function get id():Number {
            return _id;
        }

        public function get privilegeLevel():int {
            return _privilegeLevel;
        }

        public function get transportUnitType():TransportUnitType {
            return _transportUnitType;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
        	if (isNaN(_id))
        		return UIDUtil.createUID();
        	return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        	
        }

        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:TypePlacingRuleBase = TypePlacingRuleBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._allowedLocationType, _allowedLocationType, null, this, 'allowedLocationType', function setter(o:*):void{_allowedLocationType = o as LocationType});
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
               em.meta_mergeExternal(src._privilegeLevel, _privilegeLevel, null, this, 'privilegeLevel', function setter(o:*):void{_privilegeLevel = o as int});
               em.meta_mergeExternal(src._transportUnitType, _transportUnitType, null, this, 'transportUnitType', function setter(o:*):void{_transportUnitType = o as TransportUnitType});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _allowedLocationType = input.readObject() as LocationType;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _privilegeLevel = input.readObject() as int;
                _transportUnitType = input.readObject() as TransportUnitType;
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) {
                output.writeObject((_allowedLocationType is IPropertyHolder) ? IPropertyHolder(_allowedLocationType).object : _allowedLocationType);
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
                output.writeObject((_privilegeLevel is IPropertyHolder) ? IPropertyHolder(_privilegeLevel).object : _privilegeLevel);
                output.writeObject((_transportUnitType is IPropertyHolder) ? IPropertyHolder(_transportUnitType).object : _transportUnitType);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
