/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (User.as).
 */

package org.openwms.common.domain.system.usermanagement {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.collections.ListCollectionView;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class UserBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _enabled:Boolean;
        private var _expirationDate:Date;
        private var _extern:Boolean;
        private var _fullname:String;
        private var _id:Number;
        private var _lastPasswordChange:Date;
        private var _locked:Boolean;
        private var _password:String;
        private var _passwords:ListCollectionView;
        private var _preferences:ListCollectionView;
        private var _roles:ListCollectionView;
        private var _userDetails:UserDetails;
        private var _username:String;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is User) || (property as User).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
            _em = em;
        }

        public function set enabled(value:Boolean):void {
            _enabled = value;
        }
        public function get enabled():Boolean {
            return _enabled;
        }

        public function set expirationDate(value:Date):void {
            _expirationDate = value;
        }
        public function get expirationDate():Date {
            return _expirationDate;
        }

        public function set extern(value:Boolean):void {
            _extern = value;
        }
        public function get extern():Boolean {
            return _extern;
        }

        public function set fullname(value:String):void {
            _fullname = value;
        }
        public function get fullname():String {
            return _fullname;
        }

        public function get id():Number {
            return _id;
        }

        public function set lastPasswordChange(value:Date):void {
            _lastPasswordChange = value;
        }
        public function get lastPasswordChange():Date {
            return _lastPasswordChange;
        }

        public function set locked(value:Boolean):void {
            _locked = value;
        }
        public function get locked():Boolean {
            return _locked;
        }

        public function set password(value:String):void {
            _password = value;
        }
        public function get password():String {
            return _password;
        }

        public function set passwords(value:ListCollectionView):void {
            _passwords = value;
        }
        public function get passwords():ListCollectionView {
            return _passwords;
        }

        public function set preferences(value:ListCollectionView):void {
            _preferences = value;
        }
        public function get preferences():ListCollectionView {
            return _preferences;
        }

        public function set roles(value:ListCollectionView):void {
            _roles = value;
        }
        public function get roles():ListCollectionView {
            return _roles;
        }

        public function set userDetails(value:UserDetails):void {
            _userDetails = value;
        }
        public function get userDetails():UserDetails {
            return _userDetails;
        }

        public function set username(value:String):void {
            _username = value;
        }
        public function get username():String {
            return _username;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
        	if (isNaN(_id))
        		return UIDUtil.createUID();
        	return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        	
        }

        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:UserBase = UserBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._enabled, _enabled, null, this, 'enabled', function setter(o:*):void{_enabled = o as Boolean});
               em.meta_mergeExternal(src._expirationDate, _expirationDate, null, this, 'expirationDate', function setter(o:*):void{_expirationDate = o as Date});
               em.meta_mergeExternal(src._extern, _extern, null, this, 'extern', function setter(o:*):void{_extern = o as Boolean});
               em.meta_mergeExternal(src._fullname, _fullname, null, this, 'fullname', function setter(o:*):void{_fullname = o as String});
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
               em.meta_mergeExternal(src._lastPasswordChange, _lastPasswordChange, null, this, 'lastPasswordChange', function setter(o:*):void{_lastPasswordChange = o as Date});
               em.meta_mergeExternal(src._locked, _locked, null, this, 'locked', function setter(o:*):void{_locked = o as Boolean});
               em.meta_mergeExternal(src._password, _password, null, this, 'password', function setter(o:*):void{_password = o as String});
               em.meta_mergeExternal(src._passwords, _passwords, null, this, 'passwords', function setter(o:*):void{_passwords = o as ListCollectionView});
               em.meta_mergeExternal(src._preferences, _preferences, null, this, 'preferences', function setter(o:*):void{_preferences = o as ListCollectionView});
               em.meta_mergeExternal(src._roles, _roles, null, this, 'roles', function setter(o:*):void{_roles = o as ListCollectionView});
               em.meta_mergeExternal(src._userDetails, _userDetails, null, this, 'userDetails', function setter(o:*):void{_userDetails = o as UserDetails});
               em.meta_mergeExternal(src._username, _username, null, this, 'username', function setter(o:*):void{_username = o as String});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _enabled = input.readObject() as Boolean;
                _expirationDate = input.readObject() as Date;
                _extern = input.readObject() as Boolean;
                _fullname = input.readObject() as String;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _lastPasswordChange = input.readObject() as Date;
                _locked = input.readObject() as Boolean;
                _password = input.readObject() as String;
                _passwords = input.readObject() as ListCollectionView;
                _preferences = input.readObject() as ListCollectionView;
                _roles = input.readObject() as ListCollectionView;
                _userDetails = input.readObject() as UserDetails;
                _username = input.readObject() as String;
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) {
                output.writeObject((_enabled is IPropertyHolder) ? IPropertyHolder(_enabled).object : _enabled);
                output.writeObject((_expirationDate is IPropertyHolder) ? IPropertyHolder(_expirationDate).object : _expirationDate);
                output.writeObject((_extern is IPropertyHolder) ? IPropertyHolder(_extern).object : _extern);
                output.writeObject((_fullname is IPropertyHolder) ? IPropertyHolder(_fullname).object : _fullname);
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
                output.writeObject((_lastPasswordChange is IPropertyHolder) ? IPropertyHolder(_lastPasswordChange).object : _lastPasswordChange);
                output.writeObject((_locked is IPropertyHolder) ? IPropertyHolder(_locked).object : _locked);
                output.writeObject((_password is IPropertyHolder) ? IPropertyHolder(_password).object : _password);
                output.writeObject((_passwords is IPropertyHolder) ? IPropertyHolder(_passwords).object : _passwords);
                output.writeObject((_preferences is IPropertyHolder) ? IPropertyHolder(_preferences).object : _preferences);
                output.writeObject((_roles is IPropertyHolder) ? IPropertyHolder(_roles).object : _roles);
                output.writeObject((_userDetails is IPropertyHolder) ? IPropertyHolder(_userDetails).object : _userDetails);
                output.writeObject((_username is IPropertyHolder) ? IPropertyHolder(_username).object : _username);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
