<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 * Copyright (C) 2014 Heiko Scherrer
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software. If not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
    title="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_user_pref_title')}" creationComplete="onCreate();">

    <mx:Metadata>
        [Name]
        [ResourceBundle("appMain")]
        [ManagedEvent(name="USER.SAVE_USER_PROFILE")]
    </mx:Metadata>

    <mx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
			import mx.managers.PopUpManager;
            import mx.resources.ResourceManager;
            
            import org.openwms.core.domain.system.usermanagement.UserPassword;
            import org.openwms.core.domain.system.usermanagement.UserPreference;
            import org.openwms.core.domain.preferences.ApplicationPreference;
            import org.openwms.web.flex.client.model.Constants;
            import org.openwms.web.flex.client.model.ModelLocator;
            import org.openwms.web.flex.client.model.PreferencesModel;
            import org.openwms.web.flex.client.event.UserEvent;
            import org.openwms.web.flex.client.util.DisplayUtility;
            import org.openwms.web.flex.client.util.BindingProperty;
            import org.openwms.web.flex.client.util.I18nUtil;

            [Inject]
            [Bindable]
            /**
             * Injected ModelLocator.
             */
            public var modelLocator : ModelLocator;
            [Inject]
            [Bindable]
            /**
             * Injected Model.
             */
            public var prefs : PreferencesModel;
            
			private function onCreate() : void {
                if (prefs.getAppPreference(Constants.DEFAULT_LANG) != null) {
                    localesCB.selectedItem =  prefs.getAppPreference(Constants.DEFAULT_LANG).value;
                }			    
                newPwTxt1.enabled = false;
                newPwTxt2.enabled = false;            
                cancelBtn.setFocus();
				this.addEventListener(KeyboardEvent.KEY_DOWN, keyEventHandler);
                PopUpManager.centerPopUp(this);
			}		

            private function closeDialog(event : Event = null) : void {
                newPwTxt1.enabled = false;
                newPwTxt2.enabled = false;            
            	this.removeEventListener(KeyboardEvent.KEY_DOWN, keyEventHandler);
                PopUpManager.removePopUp(this);
            }

	        private function keyEventHandler(event : KeyboardEvent) : void {
	            if(event.keyCode == 27) {
	               closeDialog(event);
                }
	        }
            
            private function localeChanged() : void {
                ResourceManager.getInstance().localeChain = [localesCB.selectedItem];
                ResourceManager.getInstance().update();
            }
            
            private function onClickPw1() : void {
                newPwTxt1.enabled = true;
                newPwTxt2.enabled = true;
                newPwTxt1.setFocus();
            }

            private function onClickPw2() : void {
                newPwTxt1.enabled = true;
                newPwTxt2.enabled = true;
                newPwTxt2.setFocus();
            }

            private function onSave() : void {
                if (isPasswordValid()) {
                    var pref : UserPreference = new UserPreference(modelLocator.loggedInUser.username, Constants.DEFAULT_LANG, localesCB.selectedLabel);
                    var pw : UserPassword = null;
                    if (newPwTxt1.text != null && newPwTxt1.text.length > 0) {
                        pw = new UserPassword(modelLocator.loggedInUser, newPwTxt1.text);
                    }
                    var bindings : Array = [new BindingProperty(modelLocator.loggedInUser, "fullname", fullnameTxt, "text"),  
                                            new BindingProperty(modelLocator.loggedInUser.userDetails, "description", descriptionTxt, "text"),  
                                            new BindingProperty(modelLocator.loggedInUser.userDetails, "phoneNo", phoneNoTxt, "text"),
                                            new BindingProperty(modelLocator.loggedInUser.userDetails, "skypeName", skypeNameTxt, "text"),
                                            new BindingProperty(modelLocator.loggedInUser.userDetails, "department", departmentTxt, "text"),
                                            new BindingProperty(modelLocator.loggedInUser.userDetails, "office", officeTxt, "text")];
                    DisplayUtility.bindProperties(new ArrayCollection(bindings),
                        function execute():void {
                            var event : UserEvent = new UserEvent(UserEvent.SAVE_USER_PROFILE);
                            event.data = {user : modelLocator.loggedInUser, password : pw, preferences : [pref] };
                            dispatchEvent(event);
                        }
                    );
                } else {
                    Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_user_preference_password_invalid"));
                }
            }
            
            [Observer("USER.USER_SAVED")]
            /**
             * After the User was saved, the dialogue is closed.
             * 
             * @param event Unused 
             */
            public function onUserSaved(event : UserEvent) : void {
                closeDialog();
            }

            private function onCancel() : void {
                closeDialog();
            }
            
            private function isPasswordValid() : Boolean {
                if (newPwTxt1.enabled && newPwTxt2.enabled) {
                    return (newPwTxt1.text == newPwTxt2.text);
                }
                return true;
            }

		]]>
    </mx:Script>

    <mx:Form x="10" y="10">
        <mx:FormHeading label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'lbl_user_pref_title')}" width="100%" />
        <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_fullname')}">
            <mx:TextInput id="fullnameTxt" text="{modelLocator.loggedInUser.fullname}" />
        </mx:FormItem>
        <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_user_pref_language')}">
            <mx:ComboBox id="localesCB" dataProvider="{modelLocator.availableLocales}" change="localeChanged()" />
        </mx:FormItem>
        <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_description')}">
            <mx:TextArea id="descriptionTxt" text="{modelLocator.loggedInUser.userDetails.description}" />
        </mx:FormItem>
        <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_phone')}">
            <mx:TextInput id="phoneNoTxt" text="{modelLocator.loggedInUser.userDetails.phoneNo}" />
        </mx:FormItem>
        <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_skypeName')}">
            <mx:TextInput id="skypeNameTxt" text="{modelLocator.loggedInUser.userDetails.skypeName}" />
        </mx:FormItem>
        <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_department')}">
            <mx:TextInput id="departmentTxt" text="{modelLocator.loggedInUser.userDetails.department}" />
        </mx:FormItem>
        <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_office')}">
            <mx:TextInput id="officeTxt" text="{modelLocator.loggedInUser.userDetails.office}" />
        </mx:FormItem>
        <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_user_pref_password1')}">
            <mx:TextInput id="newPwTxt1" displayAsPassword="true" click="onClickPw1()" />
        </mx:FormItem>
        <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_user_pref_password2')}">
            <mx:TextInput id="newPwTxt2" displayAsPassword="true" click="onClickPw2()" />
        </mx:FormItem>
        <mx:HBox horizontalAlign="center" width="100%">
            <mx:Button id="saveBtn" label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'btn_save')}" click="onSave()" />
            <mx:Button id="cancelBtn" label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'btn_cancel')}" click="onCancel()" />
        </mx:HBox>
    </mx:Form>
</mx:TitleWindow>
