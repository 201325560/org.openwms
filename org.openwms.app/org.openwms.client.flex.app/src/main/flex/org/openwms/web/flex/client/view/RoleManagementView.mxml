<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 * Copyright (C) 2014 Heiko Scherrer
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software. If not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:cor="org.openwms.web.flex.client.component.*" width="100%" height="100%" backgroundColor="#C2DAEF" creationComplete="onCreate()">

    <mx:Metadata>
        [Name]
        [ManagedEvent(name="LOAD_ALL_USERS")]
        [ManagedEvent(name="LOAD_ALL_ROLES")]
        [ManagedEvent(name="SAVE_ROLE")]
        [ResourceBundle("appMain")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
            import mx.managers.PopUpManager;
            import mx.controls.Alert;
            import mx.controls.dataGridClasses.DataGridColumn;
            import mx.collections.ArrayCollection;
            import mx.events.ListEvent;

            import org.granite.tide.spring.Context;
            import org.granite.tide.spring.Identity;

            import org.openwms.core.domain.system.usermanagement.Grant;
            import org.openwms.core.domain.system.usermanagement.SecurityObject;
            import org.openwms.core.domain.system.usermanagement.User;
            import org.openwms.core.domain.system.usermanagement.Role;
            import org.openwms.web.flex.client.model.ModelLocator;
            import org.openwms.web.flex.client.event.RoleEvent;
        	import org.openwms.web.flex.client.event.ApplicationEvent;
        	import org.openwms.web.flex.client.event.UserEvent;
        	import org.openwms.web.flex.client.view.dialogs.AssignUsersDialog;
            import org.openwms.web.flex.client.view.dialogs.AssignGrantsDialog;
        	import org.openwms.web.flex.client.view.dialogs.ConfirmDeleteRoleDialog;
        	import org.openwms.web.flex.client.view.dialogs.CreateRoleDialog;
            import org.openwms.web.flex.client.util.I18nUtil;
                        
            [Inject]
            [Bindable]
            /**
             * Injected Model.
             */
            public var modelLocator : ModelLocator;            
            [Inject]
            [Bindable]
            /**
             * Injected Tide identity object.
             */
            public var iden : Identity;

            /**
             * Load all Users when not already done before and load all Roles.
             */
            private function onCreate() : void {
                if (modelLocator.allUsers.length == 0) {
                    dispatchEvent(new UserEvent(UserEvent.LOAD_ALL_USERS));
                }
                refresh();
            }
            
            private function onRowClick(event:ListEvent):void {
                modelLocator.selectedRole = event.currentTarget.selectedItem as Role;
            }

            /**
             * Double clicking an entry opens the edit dialogue.
             */ 
            private function onDoubleClick(event : MouseEvent) : void {
            	modelLocator.selectedRole = event.currentTarget.selectedItem as Role;
                var pop : CreateRoleDialog = CreateRoleDialog(PopUpManager.createPopUp(this, CreateRoleDialog, true));
                pop.roleToChange = modelLocator.selectedRole;
                pop.title = I18nUtil.trans(I18nUtil.APP_MAIN, "info_role_title_change_role");
                PopUpManager.centerPopUp(pop);
            }

            /**
             * Open dialogue to add a new Role.
             */
            private function add():void {
                var pop:CreateRoleDialog = CreateRoleDialog(PopUpManager.createPopUp(this, CreateRoleDialog, true));
                PopUpManager.centerPopUp(pop);
            }

            /**
             * Open confirm dialogue to accept deletion of a Role.
             */
            private function remove():void {
                if (lst.selectedIndices.length == 0) {
                    Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_role_select_role_to_remove"));
                    return;                 
                }
                var pop:ConfirmDeleteRoleDialog = ConfirmDeleteRoleDialog(PopUpManager.createPopUp(this, ConfirmDeleteRoleDialog, true));
                pop.items = new ArrayCollection(lst.selectedItems);
                PopUpManager.centerPopUp(pop);
            }

            /**
             * Fire event to save the selected Role.
             */
            private function save():void {
                var event:RoleEvent = new RoleEvent(RoleEvent.SAVE_ROLE);
                event.data = modelLocator.selectedRole;
                dispatchEvent(event);
            }
            
            /**
             * Add more Users to a Role.
             */
            private function addUsers():void {
                if (modelLocator.selectedRole == null) {
                    Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_role_select_role_add_user"));
                    return;
                }
                var pop:AssignUsersDialog = AssignUsersDialog(PopUpManager.createPopUp(this, AssignUsersDialog, true));
                pop.assigned = modelLocator.selectedRole.users;
                pop.role = modelLocator.selectedRole;
                PopUpManager.centerPopUp(pop);            	
            }
            
            /**
             * Assign more Grants to a Role.
             */
            private function addGrants():void {
                if (modelLocator.selectedRole == null) {
                    Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_role_select_role_assign_grants"));
                    return;
                }
                var pop:AssignGrantsDialog = AssignGrantsDialog(PopUpManager.createPopUp(this, AssignGrantsDialog, true));
                pop.assigned = modelLocator.selectedRole.grants;
                pop.role = modelLocator.selectedRole;
                PopUpManager.centerPopUp(pop);              
            }

            /**
             * Remove Users from an already existing Role.
             */
            private function removeUsers() : void {
                if (modelLocator.selectedRole == null) {
                	Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_role_select_role_to_remove"));
                    return;
                }
                if (usersLst.selectedItems.length == 0) {
                    Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_role_select_role_to_remove_users"));
                    return;
                }
            	for each (var selectedUser : User in usersLst.selectedItems) {
            		for each (var user:User in modelLocator.selectedRole.users) {
                        if (user.username == selectedUser.username) {
                        	modelLocator.selectedRole.users.removeItemAt(modelLocator.selectedRole.users.getItemIndex(user));
                        }
                    } 
                }
            }

            /**
             * Reload the list of Roles.
             */
            private function refresh() : void {
                dispatchEvent(new RoleEvent(RoleEvent.LOAD_ALL_ROLES));
            }
            
        ]]>
    </mx:Script>

    <mx:HBox x="10" y="10" width="95%" verticalAlign="middle" backgroundColor="#FFA6A6">
        <mx:Label x="10" y="10" text="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_role_screen_header')}" fontSize="24"/>
        <mx:VRule height="10"/>
        <mx:Button id="addRoleBtn" click="add()" enabled="{iden.ifAllGranted('APP_add_roles_button')}" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_role_add_role')}" icon="@Embed(source='/assets/images/Users--plus.png')" />
        <mx:VRule height="10" />
        <mx:Button id="removeRoleBtn" click="remove()" enabled="{modelLocator.selectedRole &amp;&amp; iden.ifAllGranted('APP_remove_role_button')}" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_role_delete_role')}" icon="@Embed(source='/assets/images/Users--minus.png')" />
        <mx:VRule height="10" />
        <mx:Button id="saveRoleBtn" click="save()" enabled="{modelLocator.selectedRole &amp;&amp; iden.ifAllGranted('APP_save_role_button')}" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_role_save_role')}" icon="@Embed(source='/assets/images/Users--save.png')" />
        <mx:VRule height="10" />
        <mx:Button id="refreshRoleBtn" click="refresh()" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_role_reload_roles')}" icon="@Embed(source='assets/images/icons/refresh.png')" />
    </mx:HBox>
    <mx:HRule x="9" y="53" width="95%"/>
    <mx:VBox height="100%" width="95%" x="10" y="63">
        <mx:VBox width="100%">
            <mx:DataGrid id="lst" height="200" width="100%" allowMultipleSelection="true" dataProvider="{modelLocator.allRoles}" change="onRowClick(event);" doubleClickEnabled="true" doubleClick="onDoubleClick(event);">
                <mx:columns>
                    <mx:DataGridColumn headerText="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_role_name')}" dataField="name" editable="false" width="100"/>
                    <mx:DataGridColumn headerText="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_role_description')}" dataField="description" editable="false"/>
                </mx:columns>
            </mx:DataGrid>
            <mx:HBox width="100%">
	            <mx:VBox width="50%">
	                <mx:HBox verticalAlign="middle" backgroundColor="#FFA6A6" width="100%" backgroundAlpha="0.5" horizontalGap="8" height="25">
	                    <mx:Label x="10" y="10" text="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_role_assigned_grants')}" fontSize="10"/>
	                    <mx:VRule height="10" visible="{iden.ifAllGranted('APP_assign_grants_button')}"/>
	                    <cor:ImageButton id="assignedGrantsBtn" visible="{iden.ifAllGranted('APP_assign_grants_button')}" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_role_assign_grants')}" click="addGrants()" source="@Embed(source='assets/images/icons/grant--add.png')"/>
	                </mx:HBox>
	                <mx:List id="grantsLst" dataProvider="{modelLocator.selectedRole.grants}" dataTipField="name" showDataTips="true" allowMultipleSelection="true" labelFunction="{Grant.formatWithDescriptionName}" height="200" width="100%" />
	            </mx:VBox>
	            <mx:VBox width="50%">
			        <mx:HBox verticalAlign="middle" backgroundColor="#FFA6A6" width="100%" height="25" backgroundAlpha="0.5">
			            <mx:Label x="10" y="10" text="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_role_assigned_users')}" fontSize="10"/>
			            <mx:VRule height="10" />
			            <cor:ImageButton id="assignedUsersBtn" enabled="{iden.ifAllGranted('APP_assign_users_button')}" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_role_assign_users')}" click="addUsers()" source="@Embed(source='/assets/images/User--plus.png')"/>
			            <mx:VRule height="10" />
			            <cor:ImageButton id="removeUsersBtn" enabled="{iden.ifAllGranted('APP_assign_users_button')}" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_role_remove_users_from_role')}" click="removeUsers()" source="@Embed(source='/assets/images/User--minus.png')"/>
			        </mx:HBox>
	                <mx:List id="usersLst" dataProvider="{modelLocator.selectedRole.users}" allowMultipleSelection="true" labelFunction="{User.formatWithFullnameUsername}" height="200" width="100%" />
	            </mx:VBox>
            </mx:HBox>
        </mx:VBox>
    </mx:VBox>
</mx:Canvas>
