<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 * Copyright (C) 2014 Heiko Scherrer
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software. If not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" backgroundColor="#FFFFFF" backgroundAlpha="0.5" borderStyle="solid" alpha="1"
 borderThickness="3" title="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_login_title')}" show="onShow();" creationComplete="onShow();" width="300" height="220">

    <mx:Metadata>
        [Name]
        [ManagedEvent(name="APP.REQUEST_LOGIN")]
        [ManagedEvent(name="APP.UNLOCK")]
        [ResourceBundle("appMain")]
    </mx:Metadata>

	<mx:Script>
        <![CDATA[
            import flash.utils.Proxy;
            import mx.controls.Alert;
            import mx.managers.PopUpManager;

            import org.granite.tide.events.TideResultEvent;
            import org.granite.tide.events.TideFaultEvent;
            import org.granite.tide.spring.Identity;

            import org.openwms.core.domain.system.usermanagement.User;
            import org.openwms.web.flex.client.event.ApplicationEvent;
            import org.openwms.web.flex.client.model.ModelLocator;
            import org.openwms.web.flex.client.util.I18nUtil;
            
            [Inject]
            [Bindable]
            /**
             * Injected Granite identity object.
             */
            public var identity : Identity;
            [Inject]
            [Bindable]
            /**
             * Injected Model.
             */
            public var modelLocator : ModelLocator;
            [Bindable]
            /**
             * The message text.
             */
            public var loginMessageText : String = "";
            
            private function onShow() : void {
            	userTxt.setFocus();
                PopUpManager.centerPopUp(this);
            }
            
            private function onLogin(username : String, password : String) : void {
                var event : ApplicationEvent;
                if (modelLocator.SCREEN_LOCKED) {
                    if (modelLocator.viewLockedBy == username) {
                        event = new ApplicationEvent(ApplicationEvent.APP_UNLOCK);
                        event.data = {username:username, password:password};
                        dispatchEvent(event);
                    } else {
                        loginMessageText = I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_login_locked_by', modelLocator.viewLockedBy);
                        resetFields();
                    }
                    return;
                }
                event = new ApplicationEvent(ApplicationEvent.APP_REQUEST_LOGIN);
                event.data = {username:username, password:password};
                dispatchEvent(event);
            }

            [Observer("APP.LOGIN_OK")]
            public function loginOk(event : ApplicationEvent) : void {
                loginMessageText = null;
                PopUpManager.removePopUp(this);
            }
        
            [Observer("APP.LOGIN_NOK")]
            public function loginError(event : ApplicationEvent) : void {
                loginMessageText = event.data.event.fault.faultString;
                resetFields(false, true);
            }
            
            [Observer("APP.CREDENTIALS_INVALID")]
            public function onInvalidCredentials(event : ApplicationEvent) : void {
                loginError(event);
            }

            private function resetFields(resetUserField : Boolean = true, resetPasswordField : Boolean = true) : void {
                if (resetPasswordField == true) {
                    passTxt.text = "";
                    passTxt.setFocus();
                }
                if (resetUserField == true) {
                    userTxt.text = "";
                    userTxt.setFocus();
                }
            }
        ]]>
	</mx:Script>

	<mx:Form width="100%" height="100%">
		<mx:FormHeading label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'lbl_login_title')}" />
		<mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'lbl_login_username')}">
			<mx:TextInput id="userTxt" enter="passTxt.setFocus();"/>
		</mx:FormItem>
		<mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'lbl_login_password')}">
			<mx:TextInput id="passTxt" displayAsPassword="true" enter="onLogin(userTxt.text, passTxt.text)"/>
		</mx:FormItem>
		<mx:Text text="{loginMessageText}"/>
		<mx:FormItem>
			<mx:Button label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'btn_login')}" click="onLogin(userTxt.text, passTxt.text)" />
		</mx:FormItem>
	</mx:Form>

</mx:TitleWindow>     
