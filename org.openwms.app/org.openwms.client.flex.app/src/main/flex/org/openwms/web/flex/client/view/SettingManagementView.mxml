<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="org.openwms.web.flex.client.view.fragments.*"
    width="100%" height="100%" backgroundColor="#C2DAEF" creationComplete="onCreate()">

    <mx:Metadata>
        [Name]
        [ManagedEvent(name="PROPERTY.LOAD_ALL_PROPERTIES")]
        [ManagedEvent(name="PREFERENCE.SELECTION_CHANGED")]
        [ManagedEvent(name="PREFERENCE.DELETE_PREFERENCE")]
        [ManagedEvent(name="PREFERENCE.SAVE_PREFERENCE")]
        [ManagedEvent(name="LOAD_ALL_USERS")]
        [ManagedEvent(name="LOAD_ALL_ROLES")]
        [ResourceBundle("appMain")]
        [ResourceBundle("appEntity")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        	import mx.events.FlexEvent;
        	import mx.collections.ArrayCollection;
        	import mx.managers.PopUpManager;
        	import mx.events.ListEvent;

            import org.granite.tide.spring.Identity;

        	import org.openwms.core.domain.system.AbstractPreference;
        	import org.openwms.core.domain.preferences.ApplicationPreference;
        	import org.openwms.core.domain.preferences.ModulePreference;
        	import org.openwms.core.domain.system.usermanagement.RolePreference;
        	import org.openwms.core.domain.system.usermanagement.UserPreference;
        	import org.openwms.web.flex.client.event.RoleEvent;
        	import org.openwms.web.flex.client.event.UserEvent;
        	import org.openwms.web.flex.client.event.PropertyEvent;
        	import org.openwms.web.flex.client.model.ModelLocator;
        	import org.openwms.web.flex.client.model.PreferencesModel;
            import org.openwms.web.flex.client.util.I18nUtil;
        	import org.openwms.web.flex.client.view.dialogs.CreatePreferenceDialog;

            [Inject]
            [Bindable]
            /**
             * Inject the model.
             */
            public var modelLocator : ModelLocator;
            [Inject]
            [Bindable]
            /**
             * Injected Model.
             */
            public var prefs : PreferencesModel;
            [Inject]
            [Bindable]
            /**
             * Injected Tide identity object.
             */
            public var iden : Identity;
            [Bindable]
            private var selAppPref : ApplicationPreference = null;
            [Bindable]
            private var selModPref : ModulePreference = null;
            [Bindable]
            private var selRolePref : RolePreference = null;
            [Bindable]
            private var selUserPref : UserPreference = null;
        
            /**
             * Load all Users and all Roles when not already done before and load all properties.
             */
            private function onCreate() : void {
            	if(modelLocator.allUsers.length == 0) {
            		dispatchEvent(new UserEvent(UserEvent.LOAD_ALL_USERS));
            	}
            	if(modelLocator.allRoles.length == 0) {
            		dispatchEvent(new RoleEvent(RoleEvent.LOAD_ALL_ROLES));
            	}
            	this.addEventListener("preferenceSelectionChanged", onSelect);
                reload();
            }
            
            private function createPreference() : void {
                var pop : CreatePreferenceDialog = CreatePreferenceDialog(PopUpManager.createPopUp(this, CreatePreferenceDialog, true));
                PopUpManager.centerPopUp(pop);
            }
            
            private function deleteSelected() : void {
            	dispatchEvent(new PropertyEvent(PropertyEvent.PREFERENCE_DELETE_PREFERENCE));
            }

            private function saveSelected() : void {
            	appPanel.bindProperties(new PropertyEvent(PropertyEvent.PREFERENCE_SAVE_PREFERENCE));
            }

            private function reload() : void {
                dispatchEvent(new PropertyEvent(PropertyEvent.LOAD_ALL_PROPERTIES));
            }
            
            private function onSelect(event : PropertyEvent) : void {
            	prefs.selected = event.data as AbstractPreference;
            	dispatchEvent(new PropertyEvent(PropertyEvent.PREFERENCE_SELECTION_CHANGED));
            }
            
        ]]>
    </mx:Script>
    <mx:HBox x="10" y="10" width="95%" verticalAlign="middle" backgroundColor="#FFA6A6">
        <mx:Label x="10" y="10" text="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_preferences_screen_header')}" fontSize="24"/>
        <mx:VRule height="10"/>
        <mx:Button id="addBtn" click="createPreference();" enabled="{iden.ifAllGranted('APP_add_preference_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_preferences_screen_add_pref')}" icon="@Embed(source='/assets/images/Preference--plus.png')"/>
        <mx:VRule height="10"/>
        <mx:Button id="deleteBtn" click="deleteSelected();" enabled="{prefs.selected &amp;&amp; !prefs.selected.fromFile &amp;&amp; iden.ifAllGranted('APP_delete_preference_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_preferences_screen_delete_user')}" icon="@Embed(source='/assets/images/Preference--minus.png')"/>
        <mx:VRule height="10"/>
        <mx:Button id="saveBtn" click="saveSelected();" enabled="{prefs.selected &amp;&amp; iden.ifAllGranted('APP_save_preference_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_preferences_screen_save_user')}" icon="@Embed(source='/assets/images/Preference--save.png')"/>
        <mx:VRule height="10"/>
        <mx:Button id="reloadBtn" click="reload();" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_preferences_screen_reload_users')}" icon="@Embed(source='assets/images/icons/refresh.png')"/>
    </mx:HBox>
    <mx:HRule x="9" y="53" width="95%"/>

    <mx:HBox x="10" y="63" width="95%" height="100%">
        <ui:PreferencesList x="10" y="63" width="300" height="95%"/>
        <ui:ApplicationPropertyDetailsPanel id="appPanel" height="95%" width="100%"/>
    </mx:HBox>
</mx:Canvas>
