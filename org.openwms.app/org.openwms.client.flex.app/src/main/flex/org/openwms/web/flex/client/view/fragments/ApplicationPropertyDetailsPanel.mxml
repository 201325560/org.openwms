<?xml version="1.0" encoding="UTF-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 * Copyright (C) 2014 Heiko Scherrer
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software. If not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" title="{I18nUtil.trans(I18nUtil.APP_MAIN, 'lbl_preferences_screen_details')}"
    layout="absolute">

    <mx:Metadata>
        [Name]
        [ResourceBundle("appMain")]
        [ResourceBundle("appEntity")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
            import mx.core.UIComponent;
            import mx.collections.ArrayCollection;
            import org.openwms.web.flex.client.util.DisplayUtility;
            import org.openwms.web.flex.client.util.BindingProperty;
            import org.openwms.core.domain.system.AbstractPreference;
            import org.as3commons.reflect.Constant;
            import org.openwms.web.flex.client.model.Constants;
            import org.openwms.web.flex.client.util.NumberUtil;
            import org.openwms.core.domain.system.usermanagement.User;
            import org.openwms.core.domain.system.usermanagement.Role;
            import org.openwms.web.flex.client.model.ModelLocator;
            import org.openwms.core.domain.system.usermanagement.UserPreference;
            import org.openwms.core.domain.system.usermanagement.RolePreference;
            import org.openwms.core.domain.preferences.ModulePreference;
            import org.openwms.web.flex.client.event.PropertyEvent;

        	import org.openwms.core.domain.preferences.ApplicationPreference;
        	import org.openwms.web.flex.client.model.PreferencesModel;
            import org.openwms.web.flex.client.util.I18nUtil;
    
            [Inject]
            [Bindable]
            /**
             * Inject the model.
             */
            public var model : ModelLocator;
            [Inject]
            [Bindable]
            /**
             * Injected Model.
             */
            public var prefs : PreferencesModel;
            
            /**
             * Bind all properties before saving the Preference.
             *
             * @param event dispatched again
             */
            public function bindProperties(event : PropertyEvent) : void {
                var bindings : Array = [new BindingProperty(prefs.selected, "description", descriptionTxt, "text"),  
                                        createBinding(prefs.selected) ,
                                        new BindingProperty(prefs.selected, "value", valueTxt, "text"),
                                        new BindingProperty(prefs.selected, "floatValue", floatValueTxt, "text", Number),
                                        new BindingProperty(prefs.selected, "minimum", minimumTxt, "text"),
                                        new BindingProperty(prefs.selected, "maximum", maximumTxt, "text")];
                DisplayUtility.bindProperties(new ArrayCollection(bindings),
                    function execute():void {
                        dispatchEvent(event);
                    }
                );                
            }
            
            private function createBinding(preference : AbstractPreference) : BindingProperty {
                if (preference is ModulePreference) {
                    return new BindingProperty(preference, "owner", ownerMTxt, "text");
                } else if (preference is RolePreference) {
                    return new BindingProperty(preference, "owner", ownerRCmb.selectedItem, "name");
                } else if (preference is UserPreference) {
                    return new BindingProperty(preference, "owner", ownerUCmb.selectedItem, "username");
                }
                return null;
            }
            
            private function floatSelected(component : TextInput) : void {
                component.setSelection(0, component.text.length);
            }
            
            [Observer("PREFERENCE.MODEL_CHANGED")]
            /**
             * After the model has changed, reset the key field.
             * 
             * @param event Unused
             */
            public function onModelChanged(event : PropertyEvent) : void {
                if (prefs.selected == null) {
                    this.currentState = "baseState";
                }
            }            
            
            [Observer("PREFERENCE.SELECTION_CHANGED")]
            /**
             * Whenever a new Preference was selected assign the key appropriately and  
             */
            public function onSelectionChanged(event : PropertyEvent) : void {
                if (prefs.selected == null) {
                    return;
                }
                var i : Number = -1;
                if (prefs.selected is ApplicationPreference) {
                    this.currentState = "appPrefState";
                    var appPref : ApplicationPreference = prefs.selected as ApplicationPreference;
                    keyTxt.text = appPref.key == null ? "" : appPref.key;
                    ownerATxt.text = I18nUtil.trans(I18nUtil.APP_ENTITY, 'entity_preference_Application');
                } else if (prefs.selected is ModulePreference) {
                    this.currentState = "modPrefState";
                    var modulePref : ModulePreference = prefs.selected as ModulePreference;
                    keyTxt.text = modulePref.key == null ? "" : modulePref.key;
                    ownerMTxt.text = modulePref.owner;
                } else if (prefs.selected is RolePreference) {
                    this.currentState = "rolePrefState";
                    var rolePref : RolePreference = prefs.selected as RolePreference;
                    keyTxt.text = rolePref.key == null ? "" : rolePref.key;
                    ownerRCmb.dataProvider = model.allRoles;
                    i = model.allRoles.getItemIndex(Role.findByName(rolePref.owner, model.allRoles));
                    ownerRCmb.selectedIndex = i;
                    if (i < 0) {
                        ownerRCmb.prompt = rolePref.owner;
                    }
                } else if (prefs.selected is UserPreference) {
                    this.currentState = "userPrefState";
                    var userPref : UserPreference = prefs.selected as UserPreference;
                    keyTxt.text = userPref.key == null ? "" : userPref.key;
                    ownerUCmb.dataProvider = model.allUsers;
                    i = model.allUsers.getItemIndex(User.findByName(userPref.owner, model.allUsers));
                    ownerUCmb.selectedIndex = i;
                    if (i < 0) {
                        ownerUCmb.prompt = userPref.owner;
                    }
                }
            }
            
        ]]>
    </mx:Script>

    <mx:states>
        <mx:State name="baseState">
            <mx:SetProperty target="{keyTxt}" name="text" value="" />
        </mx:State>
        <mx:State name="appPrefState">
            <mx:AddChild>
                <mx:TextInput id="ownerATxt" x="178" y="151" width="230" enabled="false" />                
            </mx:AddChild>
        </mx:State>
        <mx:State name="modPrefState">
            <mx:AddChild>
                <mx:TextInput id="ownerMTxt" x="178" y="151" width="230" />                
            </mx:AddChild>
        </mx:State>
        <mx:State name="rolePrefState">
            <mx:AddChild>
                <mx:ComboBox id="ownerRCmb" labelField="name" x="178" y="151" width="230" />
            </mx:AddChild>
        </mx:State>
        <mx:State name="userPrefState">
            <mx:AddChild>
                <mx:ComboBox id="ownerUCmb" labelFunction="{User.formatWithFullnameUsername}" x="178" y="151" width="230" />                
            </mx:AddChild>
        </mx:State>
    </mx:states>
   
    <mx:NumberValidator id="numberVal" domain="real" property="text" source="{floatValueTxt}" required="false" />
    
    <mx:Label  id="keyLbl" text="{I18nUtil.trans(I18nUtil.APP_ENTITY, 'entity_preference_key')}" fontWeight="bold" x="10" y="10" />
    <mx:TextInput id="keyTxt" width="230" x="178" y="8" editable="false"/>
    
    <mx:Label id="descriptionLbl" text="{I18nUtil.trans(I18nUtil.APP_ENTITY, 'entity_preference_description')}" x="10" y="36" />
    <mx:TextArea id="descriptionTxt" text="{prefs.selected.description}" x="178" y="35" width="230"  height="100"/>

    <mx:Label id="ownerLbl" text="{I18nUtil.trans(I18nUtil.APP_ENTITY, 'entity_preference_owner')}" fontWeight="normal" x="10" y="153" />

    <mx:HRule id="hrule0" x="10" y="143" width="398" />

    <mx:Label id="valueLbl" text="{I18nUtil.trans(I18nUtil.APP_ENTITY, 'entity_preference_value')}" x="10" y="179" />
    <mx:TextInput id="valueTxt" text="{prefs.selected.value}" width="230" x="178" y="177" />

    <mx:Label id="floatValueLbl" text="{I18nUtil.trans(I18nUtil.APP_ENTITY, 'entity_preference_floatValue')}" x="10" y="205" />
    <mx:TextInput id="floatValueTxt" text="{NumberUtil.formatFloatValue(prefs.selected.floatValue)}" focusIn="floatSelected(floatValueTxt);" width="230" x="178" y="203" />

    <mx:Label id="minimumLbl" text="{I18nUtil.trans(I18nUtil.APP_ENTITY, 'entity_preference_minimum')}" x="10" y="231" />
    <mx:TextInput id="minimumTxt" text="{prefs.selected.minimum}" width="230" x="178" y="229" />

    <mx:Label id="maximumLbl" text="{I18nUtil.trans(I18nUtil.APP_ENTITY, 'entity_preference_maximum')}" x="10" y="257" />
    <mx:TextInput id="maximumTxt" text="{prefs.selected.maximum}" width="230" x="178" y="255" />

    <mx:Label id="fromFileLbl" text="{I18nUtil.trans(I18nUtil.APP_ENTITY, 'entity_preference_fromFile')}" x="10" y="283" />
    <mx:CheckBox id="fromFileChk" enabled="false" selected="{prefs.selected.fromFile}" x="178" y="283" />
</mx:Panel>
