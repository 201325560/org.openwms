<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:business="org.openwms.web.flex.client.business.*"
	xmlns:control="org.openwms.web.flex.client.control.*" xmlns:event="org.openwms.web.flex.client.event.*" xmlns:view="org.openwms.web.flex.client.view.*" layout="absolute"
	backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFFFF, #FFFFFF]" creationComplete="init()">

	<!-- Styles -->
	<mx:Style source="/assets/css/main.css" />
	<mx:Style source="/assets/css/styles.css" />
	
	<!-- Scripts -->
	<mx:Script>
		<![CDATA[
			import mx.events.ModuleEvent;
            import mx.events.MenuEvent;
			import mx.modules.IModuleInfo;
			import mx.modules.ModuleManager;
            import mx.managers.PopUpManager;
            import mx.managers.DragManager;
            import mx.messaging.channels.AMFChannel;
            import mx.messaging.ChannelSet;
            import mx.rpc.events.ResultEvent;
            import mx.collections.ArrayCollection;
            import mx.collections.XMLListCollection;
			import mx.controls.Alert;
            import flash.events.Event;
            import org.openwms.web.flex.client.IApplicationModule;
			import org.openwms.web.flex.client.model.ModelLocator;
            import org.openwms.web.flex.client.control.MainController;
            import org.openwms.web.flex.client.service.ModuleLocator;
			import org.openwms.web.flex.client.event.SwitchScreenEvent;
			import org.openwms.web.flex.client.event.ApplicationEvent;
            import org.openwms.web.flex.client.event.ModulesEvent;
            import org.openwms.web.flex.client.event.EventBroker;
            import org.openwms.web.flex.client.command.LoadModulesCommand;
			import org.openwms.common.domain.Module;
			import org.openwms.common.domain.MenuItem;
            import org.granite.rpc.remoting.mxml.SecureRemoteObject;
            import org.granite.events.SecurityEvent;

			[Bindable]
			private var modelLocator:ModelLocator = ModelLocator.getInstance();
            [Bindable]
            private var moduleLocator:ModuleLocator = ModuleLocator.getInstance();
            [Bindable]
            private var broker:EventBroker = EventBroker.getInstance();
			[Bindable]
            private var srv:SecureRemoteObject = null;
            [Bindable]
            protected var mainController = new MainController(); 
            [Bindable]
            public var menuBarCollection:XMLListCollection;
            [Bindable]
            var menuItems:ArrayCollection;
            
            // Manager classes are loaded to the application domain
            private var moduleManager:ModuleManager; 
            private var popUpManager:PopUpManager;
            private var dragManager:DragManager;
            private var mInfo:IModuleInfo
            
			public function init():void {
                srv = new SecureRemoteObject("userService");
                //srv.login();
                registerEventListeners();
                detectModules();
                //configService.send();
			}
			
            public function onSecurityEvent(event:SecurityEvent):void {
                trace("onSecurityEvent: " + event);
                switch (event.type) {
                case SecurityEvent.INVALID_CREDENTIALS:
                    loginView.loginMessageText = "Invalid username or password";
                    loginView.authenticated = false;
                    break;
                case SecurityEvent.NOT_LOGGED_IN:
                    srv.logout();
                    loginView.loginMessageText = "";
                    loginView.authenticated = false;
                    break;
                case SecurityEvent.SESSION_EXPIRED:
                    srv.logout();
                    loginView.loginMessageText = "Session expired";
                    loginView.authenticated = false;
                    break;
                case SecurityEvent.ACCESS_DENIED:
                    Alert.show("You don't have required rights to execute this action");
                    break;
                }
            }

			private function onMenuChange(event:MenuEvent):void {
				trace("Switching to view:"+event.item.@action);
				new SwitchScreenEvent(event.item.@action).dispatch();
			}
			
            public function login(username:String, password:String):void {
                srv.setCredentials(username, password);
                srv.login();
            }

            public function logout():void {
                srv.logout();
                loginView.authenticated = false;
                loginView.loginMessageText = "";
            }
            
            private function registerEventListeners():void {
                var broker:EventBroker = EventBroker.getInstance();
                broker.addEventListener(ApplicationEvent.MODULE_CONFIG_CHANGED, moduleConfigChanged);
                // When all modules are loaded from DB then notify application to start modules automatically ...
                broker.addEventListener(ModulesEvent.MODULES_LOADED, loadAllModules);
            }
            
            /**
             * In the case the Module confifuration has changed, a re-organize of menus and
             * views becomes necessary.
             */ 
            private function moduleConfigChanged(event:ApplicationEvent):void {
                // Modules were loaded, hence update viewStack, menuBar and popUps...
                if (event.data != null && event.data is IApplicationModule) 
                {
                    var appModule:IApplicationModule = (event.data as IApplicationModule);
                    trace("Configuration changed for Module:"+appModule.getModuleName());
                    // Resolve MenuItems to populate application menu...
                    menuItems = appModule.getMainMenuItems();
                    //mainMenuBar.dataProvider.removeAll();
                    for each (var m:Object in menuItems) {
                        trace("m:"+m);
                    }
                    mainMenuBar.dataProvider = menuItems ;
                }
            }
            
            /**
             * This method rebuilds the viewStack of the application, and should be called,
             * in case application modules are loaded or unloaded.
             */
            private function refreshViewStack()
            {
                
            }
            
            /**
             * This method rebuilds the main application menu and should be called
             * in case an application module is loaded or unloaded.
             * The main menu, could be an MenuBar or any other kind of menu.
             */
            private function refreshMainMenu()
            {
                
            }
            
            /**
             * Load all modules that are configured to start automatically. This method is event triggered
             * and called when the module configuration is loaded from the service layer.
             */
            public function loadAllModules(event:Event):void
            {
                for each (var module:Module in moduleLocator.allModules)
                {
                    if (module.loadOnStartup)
                    {
                        moduleLocator.loadModule(module);
                    }
                    else
                    {
                        trace("Module not configured to load on startup:" + module.moduleName);
                    }
                }
                return;
            }

            private function updateViewStack(module:Module):void {
                for each (var menuItem:MenuItem in module.menuItems)
                {
                    trace("MenuItem:"+menuItem.label);
                }
            }

            private function detectModules():void {
                new ApplicationEvent(ApplicationEvent.LOAD_ALL_MODULES).dispatch();
            }
            

		]]>
	</mx:Script>

	<!-- Services -->
	<business:Services />

	<!-- 
	<control:MainController />
 -->
	<mx:VBox height="100%" width="100%" verticalGap="0" backgroundColor="#C2DAEF">
		<mx:Canvas width="100%" height="66" backgroundImage="@Embed(source='openwms_banner.jpg')" backgroundSize="100%">
			<mx:Image source="@Embed('/assets/images/openwms_header.png')" />
		</mx:Canvas>
		<mx:Canvas width="100%" height="25" backgroundImage="@Embed(source='breadcrumbs.jpg')" backgroundSize="100%">
			<mx:MenuBar id="mainMenuBar" labelField="@label" itemClick="onMenuChange(event)" color="#00286e" fontWeight="bold" fontSize="12" alpha="0.0">
				<mx:XMLList>
					<menuitem label="Application">
                        <menuitem label="Connect ..." enabled="false" />
                        <menuitem label="Logout" enabled="false" />
					</menuitem>
					<menuitem label="Administration">
						<menuitem label="Users" action="{SwitchScreenEvent.SHOW_USER_MGMT_VIEW}" />
						<menuitem label="Roles" action="{SwitchScreenEvent.SHOW_USER_MGMT_VIEW}" />
						<menuitem label="Security" action="{SwitchScreenEvent.SHOW_USER_MGMT_VIEW}" />
					</menuitem>
					<menuitem label="Warehouse">
						<menuitem label="Ordering" enabled="false" />
						<menuitem label="Receiving" enabled="false" />
					</menuitem>
					<menuitem label="Stock Configuration">
                        <menuitem label="Module Management" action="{SwitchScreenEvent.SHOW_MODULE_MGMT_VIEW}" />
						<menuitem label="Transport Units" action="{SwitchScreenEvent.SHOW_TRANSPORTUNIT_VIEW}" />
                        <menuitem label="Locations" action="{SwitchScreenEvent.SHOW_LOCATION_VIEW}" />
						<menuitem label="Users" action="{SwitchScreenEvent.SHOW_USER_MGMT_VIEW}" />
						<menuitem label="Location Groups" action="{SwitchScreenEvent.SHOW_LOCATIONGROUP_VIEW}" />
					</menuitem>
					<menuitem label="Monitoring">
						<menuitem label="Reports" enabled="false" />
					</menuitem> 
				</mx:XMLList>
			</mx:MenuBar>
		</mx:Canvas>
		<mx:HBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:ViewStack id="myViewStack" selectedIndex="{loginView.authenticated ? modelLocator.mainViewStackIndex : modelLocator.mainViewStackIndex}">
            <view:LoginView id="loginView" onLogin="login" cornerRadius="20" borderStyle="solid" alpha="1.0" borderThickness="3"/>
            <view:EmptyScreenView />
            <view:ModuleManagementView />
			<view:LocationView />
			<view:LocationGroupView />
			<view:UserManagementView />
			<view:TransportUnitView />
		</mx:ViewStack>
        </mx:HBox>
	</mx:VBox>

</mx:Application>
