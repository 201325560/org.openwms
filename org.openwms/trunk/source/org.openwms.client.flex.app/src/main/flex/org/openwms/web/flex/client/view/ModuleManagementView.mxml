<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundAlpha="0.0" creationComplete="init()">

    <mx:Script>
        <![CDATA[
            
            import mx.collections.ArrayCollection;
            import mx.binding.utils.BindingUtils;
            import org.openwms.web.flex.client.module.ModuleLocator;
            import org.openwms.common.domain.Module;
            import org.openwms.web.flex.client.event.ApplicationEvent;
            import org.openwms.web.flex.client.model.ModelLocator;
            import mx.events.ListEvent;
            import mx.events.DragEvent;

            [Bindable]
            private var modelLocator:ModelLocator = ModelLocator.getInstance();            
            [Bindable]
            private var moduleLocator:ModuleLocator = ModuleLocator.getInstance();
        
            private function init():void {
                this.addEventListener(ApplicationEvent.MODULE_CONFIG_CHANGED, moduleConfigChanged);
                newBtn.enabled = true;
                saveBtn.enabled = false;
                deleteBtn.enabled = false;
                enableTextFields(false);
                traceOut();
            }
            
            private function moduleConfigChanged():void {
                newBtn.enabled = true;
                saveBtn.enabled = false;
                deleteBtn.enabled = false;
                enableTextFields(false);
            }
            
            private function newModule():void {
                var module:Module = new Module();
                moduleLocator.selectedModule = module;
                saveBtn.enabled = true;
                deleteBtn.enabled = true;
                newBtn.enabled = false;
                enableTextFields(true);
                moduleNameTxt.setFocus();
            }

            private function saveModule():void {
                deleteBtn.enabled = false;
                saveBtn.enabled = false;
                var e:ApplicationEvent = new ApplicationEvent(ApplicationEvent.SAVE_MODULE);
                e.data = moduleLocator.selectedModule;
                e.dispatch();
                moduleConfigChanged();
                newBtn.setFocus();
            }
            
            private function deleteModule():void {
                if (moduleLocator.selectedModule != null) {
                    trace("Delete Module: "+moduleLocator.selectedModule.moduleName);
                    if (!isNaN(moduleLocator.selectedModule.id)) {
                        // Persisted instance
                        var e:ApplicationEvent = new ApplicationEvent(ApplicationEvent.DELETE_MODULE);
                        e.data = moduleLocator.selectedModule;
                        e.dispatch();
                    }
                    moduleLocator.selectedModule = null;
                    enableTextFields(false);
                    saveBtn.enabled = false;
                    deleteBtn.enabled = false;
                    newBtn.enabled = true;
                    modulesGrid.setFocus();
                }
            }
            
            private function loadModule():void {
                if (moduleLocator.selectedModule != null) {
                    if (moduleLocator.selectedModule.loaded) {
                        moduleLocator.unloadModule(moduleLocator.selectedModule);
                    } else {
                        moduleLocator.loadModule(moduleLocator.selectedModule);
                    }
                }
            }

            private function enableTextFields(enable:Boolean):void {
                moduleNameTxt.enabled = enable;
                urlTxt.enabled = enable;
                descriptionTxt.enabled = enable;
            }
            
            private function onChange():void {
                saveBtn.enabled = true;
            }

            private function onRowClick( event:ListEvent ):void {
                moduleLocator.selectedModule = (event.currentTarget.selectedItem) as Module;
                enableTextFields(true);
                deleteBtn.enabled = true;
            }
            
            private function onDragComplete(event:DragEvent):void {
                var e:ApplicationEvent = new ApplicationEvent(ApplicationEvent.SAVE_MODULE);
                var value:Object = event.dragSource.dataForFormat('items');
                var index:int = modulesGrid.calculateDropIndex(event);
                if (value != null) {
                    moduleLocator.selectedModule = getModule(value as Module);
                    moduleLocator.selectedModule.startupOrder = index;
                    e.data = moduleLocator.selectedModule;
                    e.dispatch();
                }
                traceOut();
            }
            
            private function traceOut():void {
                var i:int = 0;
                for each (var module:Module in moduleLocator.allModules)
                {
                    trace("Module ["+i+"]:"+module.moduleName);
                    i++;
                }
            }

            private function getModule(module:Module):Module {
                for each (var m:Module in moduleLocator.allModules)
                {
                    if (m.moduleName == module.moduleName) {
                        return m;
                    }
                }
                return module;
            }

        ]]>
    </mx:Script>

    <mx:Binding source="moduleNameTxt.text" destination="moduleLocator.selectedModule.moduleName" />
    <mx:Binding source="urlTxt.text" destination="moduleLocator.selectedModule.url" />
    <mx:Binding source="descriptionTxt.text" destination="moduleLocator.selectedModule.description" />
    <mx:Binding source="loadOnStartupChk.selected" destination="moduleLocator.selectedModule.loadOnStartup" />

    <mx:StringValidator minLength="1" tooShortError="Modulename is required" source="{moduleNameTxt}" required="true" property="text"/>
    <mx:StringValidator minLength="1" tooShortError="URL is required" source="{urlTxt}" required="true" property="text"/>

		<mx:Panel height="255" backgroundColor="#EAFF00" backgroundAlpha="0.5" width="100%" layout="absolute" x="10" y="10" title="Modules">
			<mx:List id="modulesGrid" dataProvider="{moduleLocator.allModules}" labelField="moduleName" dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" dragDrop="onDragComplete(event);" width="300" x="10" y="10" height="195" itemClick="onRowClick(event)" />
			<mx:Canvas height="195" x="318" y="10" width="466">
			<mx:Form width="100%">
				<mx:FormItem label="Modulename" required="true" x="10" y="10" >
				    <mx:TextInput id="moduleNameTxt" x="95" y="8" width="301" change="onChange()" text="{moduleLocator.selectedModule.moduleName}" />
				</mx:FormItem>
				<mx:FormItem label="URL" required="true" x="10" y="40" >
    				<mx:TextInput id="urlTxt" x="95" y="38" width="301" change="onChange()" text="{moduleLocator.selectedModule.url}" />
                </mx:FormItem>
                <mx:FormItem label="Description" x="10" y="70" >
    				<mx:TextInput id="descriptionTxt" x="95" y="68" width="301" change="onChange()" text="{moduleLocator.selectedModule.description}" />
                </mx:FormItem>
                <mx:FormItem label="Load on Startup" x="10" y="100" >
                    <mx:CheckBox id="loadOnStartupChk" change="onChange()" x="95" y="98" selected="{moduleLocator.selectedModule.loadOnStartup}"/>
                </mx:FormItem>
			</mx:Form>
            <mx:Button id="newBtn" label="New" x="10" y="140" click="newModule()" />
            <mx:Button id="saveBtn" label="Save" x="67" y="140" click="saveModule()"/>
            <mx:Button id="deleteBtn" label="Delete" x="129" y="140" click="deleteModule()"/>
            <mx:Button id="loadBtn" label="{(moduleLocator.selectedModule == null || moduleLocator.selectedModule.loaded) ? 'Unload' : 'Load'}" x="200" y="140" click="loadModule()" enabled="{(moduleLocator.selectedModule == null || moduleLocator.selectedModule.moduleName == '') ? false : true}"/>
			</mx:Canvas>
		</mx:Panel>
	<mx:Panel width="100%" backgroundColor="#EAFF00" backgroundAlpha="0.5" y="310" layout="absolute" x="10" height="255" title="Views and Menu Items">
		<mx:Label x="10" y="13" text="MenuItems provided by this Module"/>
		<mx:Tree x="10" y="39" height="166" width="205"></mx:Tree>
		<mx:List x="223" y="39" height="166" width="160"></mx:List>
		<mx:List x="391" y="39" height="166" width="260"></mx:List>
		<mx:Label x="223" y="13" text="Views included in Module"/>
		<mx:Label x="391" y="13" text="Context Menus provided by Module"/>
	</mx:Panel>
</mx:Canvas>
