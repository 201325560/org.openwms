<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="528" height="350" title="Assign Location Types to Transport Unit Type" fontSize="12" creationComplete="init();">

    <mx:Script>
    	<![CDATA[
    		import org.openwms.web.flex.client.common.event.TransportUnitTypeEvent;
    		import org.openwms.web.flex.client.common.event.TransportUnitEvent;
    		import org.openwms.common.domain.TransportUnitType;
    		import mx.collections.ListCollectionView;
    		import org.openwms.common.domain.TypePlacingRule;
    		import mx.managers.PopUpManager;
    		import org.openwms.common.domain.LocationType;
    		import org.openwms.web.flex.client.common.model.CommonModelLocator;
    		import mx.collections.ArrayCollection;

            [Bindable]
            private var commonModelLocator:CommonModelLocator = CommonModelLocator.getInstance();
            [Bindable]
            private var notAssigned:ArrayCollection = new ArrayCollection();
            [Bindable]
            private var assigned:ArrayCollection = new ArrayCollection();
            [Bindable]
            private var rules:ListCollectionView;
            [Bindable]
            public var transportUnitType:TransportUnitType;
            private var changed:Boolean = false;

            private function init():void
            {
            	rules = transportUnitType.typePlacingRules;
                notAssigned = new ArrayCollection(commonModelLocator.allLocationTypes.toArray());
            	if (rules != null && rules.length > 0)
            	{
            	    for each (var rule:TypePlacingRule in rules)
            	    {
                        notAssigned.removeItemAt(notAssigned.getItemIndex(rule.allowedLocationType));
                        assigned.addItem(rule.allowedLocationType);
                    }
                }
                this.addEventListener(KeyboardEvent.KEY_DOWN, keyEventHandler);
                PopUpManager.centerPopUp(this);
            }

            private function closeDialog(event:Event=null):void
            {
                this.removeEventListener(KeyboardEvent.KEY_DOWN, keyEventHandler);
                PopUpManager.removePopUp(this);
            }

            private function keyEventHandler(event:KeyboardEvent):void
            {
                if(event.keyCode == 27)
                {
                   closeDialog(event);
                   return;
                }
            }

            private function accept(e:Event):void
            {
            	/*
            	for each (var rule:TypePlacingRule in rules)
            	{
            		if (!assigned.contains(rule.allowedLocationType))
            		{
                        trace("Removed a rule");
            			rules.removeItemAt(rules.getItemIndex(rule));
            			changed = true;
            		}
            	}
            	for each (var locationType:LocationType in assigned)
            	{
            		if (!rules.contains(locationType))
            		{
            			trace("Added a rule");
            			var newRule:TypePlacingRule = new TypePlacingRule();
            			newRule.withTransportUnitType(transportUnitType);
            			newRule.withLocationType(locationType);
            			transportUnitType.typePlacingRules.addItem(newRule);
                        changed = true;
            		}
            	}
            	*/
            	if (changed)
            	{
                    var event:TransportUnitTypeEvent = new TransportUnitTypeEvent(TransportUnitTypeEvent.SAVE_ALLOWED_LOCATION_TYPES);
                    event.data = {tuType:transportUnitType.type, newAssigned:assigned, newNotAssigned:notAssigned};
                    event.dispatch();
                }
                closeDialog();
            }

            private function formatFunction(item:*):String
            {
                return (item as LocationType).type+"\t"+(item as LocationType).description;
            }
            
            private function moveRight():void
            {
            	for each (var locationType:LocationType in allLocationTypesLst.selectedItems)
            	{
            		notAssigned.removeItemAt(notAssigned.getItemIndex(locationType));
            		assigned.addItem(locationType);
            		changed = true;
            	}
            }
            		
            private function moveLeft():void
            {
                for each (var locationType:LocationType in assLocationTypesLst.selectedItems)
                {
                    assigned.removeItemAt(assigned.getItemIndex(locationType));
                    notAssigned.addItem(locationType);
                    changed = true;
                }
            }
    	]]>
    </mx:Script>
    
	<mx:List id="allLocationTypesLst" width="202" height="225" labelFunction="formatFunction" allowMultipleSelection="true" dataProvider="{notAssigned}" enabled="true" alternatingItemColors="[#B7BABC, #FFFFFF]" y="39" x="10"/>
	<mx:List id="assLocationTypesLst" width="202" height="225" labelFunction="formatFunction" allowMultipleSelection="true" dataProvider="{assigned}" enabled="true" alternatingItemColors="[#B7BABC, #FFFFFF]" y="39" x="296"/>
	<mx:HBox width="100%" horizontalAlign="center" x="0" y="272">
		<mx:Button id="saveBtn" label="Save" click="accept(event)" fontSize="12"/>
		<mx:Button id="cancelBtn" label="Cancel" click="closeDialog(event)" fontSize="12"/>
	</mx:HBox>
	<mx:Label x="56" y="10" text="All Location Types"/>
	<mx:Label x="316" y="10" text="Assigned Location Types"/>
    <mx:Button x="234" y="117" buttonMode="true" mouseChildren="false" toolTip="Move Right" icon="@Embed(source='assets/images/icons/arrow_right.png')" click="moveRight()"/>
	<mx:Button x="234" y="147" buttonMode="true" mouseChildren="false" toolTip="Move Left" icon="@Embed(source='assets/images/icons/arrow_left.png')" click="moveLeft()"/>
	
</mx:Panel>
