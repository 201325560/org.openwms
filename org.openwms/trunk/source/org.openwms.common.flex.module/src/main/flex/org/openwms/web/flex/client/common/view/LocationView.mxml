<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundColor="#C2DAEF" show="init()">

    <mx:Metadata>
        [Name]
        [ManagedEvent(name="LOAD_ALL_LOCATIONS")]
        [ManagedEvent(name="LOAD_ALL_LOCATION_TYPES")]
        [ManagedEvent(name="LOAD_ALL_LOCATION_GROUPS")]
        [ManagedEvent(name="SAVE_LOCATION")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        	import mx.events.ValidationResultEvent;
        	import mx.controls.Alert;
        	import org.openwms.web.flex.client.common.event.LocationEvent;
        	import mx.managers.PopUpManager;
            import org.openwms.web.flex.client.common.view.dialogs.CreateLocationDialog;
        	import org.openwms.web.flex.client.common.view.dialogs.ConfirmDeletionLocationDialog;
        	import org.openwms.web.flex.client.common.event.LocationTypeEvent;
        	import org.openwms.common.domain.LocationGroup;
        	import org.openwms.common.domain.LocationType;
        	import org.openwms.common.domain.Location;
            import org.openwms.web.flex.client.common.model.CommonModelLocator;
            import mx.controls.dataGridClasses.DataGridColumn;
            import mx.collections.ArrayCollection;
            import org.openwms.web.flex.client.common.event.LoadLocationGroupsEvent;
            import mx.events.ListEvent;
            import org.openwms.web.flex.client.model.ModelLocator;
            [In]
            [Bindable]
            public var modelLocator:ModelLocator;
            [In]
            [Bindable]
            public var commonModelLocator:CommonModelLocator;
            [Bindable]
            private var selected:Location;
            [Bindable]
            private var listLocationGroups:ArrayCollection=new ArrayCollection();

            private function init():void
            {
                dispatchEvent(new LocationEvent(LocationEvent.LOAD_ALL_LOCATIONS));
                if (commonModelLocator.allLocationTypes.length == 0)
                {
                	dispatchEvent(new LocationTypeEvent(LocationTypeEvent.LOAD_ALL_LOCATION_TYPES));
                }
                if (commonModelLocator.allLocationGroups.length == 0)
                {
                	dispatchEvent(new LoadLocationGroupsEvent(LoadLocationGroupsEvent.LOAD_ALL_LOCATION_GROUPS));
                }
            }

            private function onRowClick(event:ListEvent):void
            {
                selected = (event.currentTarget.selectedItem) as Location;
                lastAccessTxt.text=dateFormatter.format(selected.lastAccess);
                setLocationGroup();
                setLocationType();
            }

            private function setLocationType():void
            {
                var locGroup:int=-1;
                for each (var type:LocationType in commonModelLocator.allLocationTypes)
                {
                    if (type.id == selected.locationType.id)
                    {
                        locGroup=commonModelLocator.allLocationTypes.getItemIndex(type);
                    }
                }
                locationTypeCB.selectedIndex=locGroup;
            }

            private function setLocationGroup():void
            {
                var locGroup:int=-1;
                for each (var l:LocationGroup in commonModelLocator.allLocationGroups)
                {
                    if (l.id == selected.locationGroup.id)
                    {
                        locGroup=commonModelLocator.allLocationGroups.getItemIndex(l);
                    }
                }
                locationGroupCB.selectedIndex=locGroup;
            }

            private function locationIdField(item:Object, dg:DataGridColumn):String
            {
                return item.locationId[dg.dataField];
            }

            private function locationGroupField(item:Object, dg:DataGridColumn):String
            {
                if (item.locationGroup != null)
                {
                    return item.locationGroup[dg.dataField];
                }
                return "NULL";
            }

            private function showCreateLocationDialog():void
            {
                var pop:CreateLocationDialog = CreateLocationDialog(PopUpManager.createPopUp(this, CreateLocationDialog, true));
                PopUpManager.centerPopUp(pop);
            }

            private function showDeleteLocationDialog():void
            {
                if (locationsList.selectedIndices.length == 0)
                {
                    Alert.show("Please select a Location to delete");
                    return;                 
                }
                var pop:ConfirmDeletionLocationDialog = ConfirmDeletionLocationDialog(PopUpManager.createPopUp(this, ConfirmDeletionLocationDialog, true));
                pop.messageText = "Delete selected Locations";
                pop.items = new ArrayCollection(locationsList.selectedItems);
                PopUpManager.centerPopUp(pop);
            }

            private function saveLocation():void
            {
                var event:LocationEvent = new LocationEvent(LocationEvent.SAVE_LOCATION);
                event.data = selected;
                dispatchEvent(event);
            }

            private function refresh():void
            {
            	selected = null;
                var event:LocationEvent = new LocationEvent(LocationEvent.LOAD_ALL_LOCATIONS);
                dispatchEvent(event);
            }
        ]]>
    </mx:Script>

    <mx:Binding source="descriptionTxt.text" destination="selected.description" />
    <mx:Binding source="(locationGroupCB.selectedItem as LocationGroup)" destination="selected.locationGroup" />
    <mx:Binding source="locationGroupCountingActiveChk.selected" destination="selected.locationGroupCountingActive" />
    <mx:Binding source="(locationTypeCB.selectedItem as LocationType)" destination="selected.locationType" />
    <mx:Binding source="noMaxTransportUnitsTxt.value" destination="selected.noMaxTransportUnits" />
    <mx:Binding source="Number(plcStateTxt.text)" destination="selected.plcState" />
    <mx:Binding source="countingActiveChk.selected" destination="selected.countingActive" />
    <mx:Binding source="incomingActiveChk.selected" destination="selected.incomingActive" />
    <mx:Binding source="outgoingActiveChk.selected" destination="selected.outgoingActive" />
    <mx:Binding source="consideredInAllocationChk.selected" destination="selected.consideredInAllocation" />

    <mx:DateFormatter id="dateFormatter" formatString="{ModelLocator.DT_FORMAT_STRING}"/>

    <mx:HBox x="10" y="10" verticalAlign="middle" backgroundColor="#C6FFC7" width="95%">
        <mx:Label x="10" y="10" text="Locations" fontSize="24"/>
        <mx:VRule height="10"/>
        <mx:Button id="addLocationBtn" buttonMode="true" mouseChildren="false" toolTip="Create a new Location" icon="@Embed(source='/assets/images/Location--Add.png')" click="showCreateLocationDialog()"/>
        <mx:VRule height="10"/>
        <mx:Button id="removeLocationBtn" buttonMode="true" mouseChildren="false" toolTip="Delete an existing Location" icon="@Embed(source='/assets/images/Location--Delete.png')" click="showDeleteLocationDialog()"/>
        <mx:VRule height="10"/>
        <mx:Button id="saveLocationBtn" buttonMode="true" mouseChildren="false" toolTip="Save an existing Location" icon="@Embed(source='/assets/images/Location--Save.png')" click="saveLocation()"/>
        <mx:VRule height="10"/>
        <mx:Button id="refreshLocationBtn" buttonMode="true" mouseChildren="false" toolTip="Refresh the list of Locations" icon="@Embed(source='assets/images/icons/refresh.png')" click="refresh()"/>
    </mx:HBox>
    <mx:HRule x="9" y="53" width="95%"/>
    <mx:HBox height="100%" width="95%" x="10" y="63">
        <mx:DataGrid id="locationsList" allowMultipleSelection="true" sortableColumns="true" height="95%" width="100%" dataProvider="{modelLocator.allLocations}" change="onRowClick(event)">
            <mx:columns>
                <mx:DataGridColumn dataField="area" labelFunction="locationIdField" editable="false" width="50">
                    <mx:headerRenderer>
                        <mx:Component>
                            <mx:Label text="Area" styleName="headerArea"/>
                        </mx:Component>
                    </mx:headerRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="Aisle" dataField="aisle" labelFunction="locationIdField" editable="false" width="50"/>
                <mx:DataGridColumn headerText="X" dataField="x" labelFunction="locationIdField" editable="false" width="50"/>
                <mx:DataGridColumn headerText="Y" dataField="y" labelFunction="locationIdField" editable="false" width="50"/>
                <mx:DataGridColumn headerText="Z" dataField="z" labelFunction="locationIdField" editable="false" width="50"/>
                <mx:DataGridColumn headerText="Location Group" dataField="name" labelFunction="locationGroupField" editable="false"/>
                <mx:DataGridColumn headerText="Description" dataField="description" editable="true"/>
                <mx:DataGridColumn headerText="Counting Active" dataField="countingActive" editable="true">
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:CheckBox/>
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="Incoming Active" dataField="incomingActive" editable="true">
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:CheckBox/>
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="Outgoing Active" dataField="outgoingActive" editable="true">
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:CheckBox/>
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="Last Access" dataField="lastAccess" editable="false"/>
            </mx:columns>
        </mx:DataGrid>
        <mx:Canvas id="locationDetailsPnl" x="618" y="63" backgroundColor="#C6FFC7" backgroundAlpha="0.5">

            <mx:Image x="10" y="10" mouseChildren="false" source="@Embed(source='/assets/images/Location.png')"/>
            <mx:Label text="Location" fontWeight="bold" width="130" textAlign="right" x="10" y="12"/>
            <mx:Text text="{selected.locationId.toString()}" width="100%" fontWeight="bold" x="148" y="12"/>

            <mx:Label text="Description" width="130" textAlign="right" x="10" y="38"/>
            <mx:TextArea id="descriptionTxt" text="{selected.description}" width="200" height="64" x="148" y="37"/>
            <mx:HRule x="10" y="109" width="350"/>
            <mx:HRule x="10" y="10" width="360" strokeWidth="0"/>

            <mx:Image x="10" y="119" mouseChildren="false" source="@Embed(source='/assets/images/LocationGroup.png')"/>
            <mx:Label text="Location Group" width="130" textAlign="right" x="10" y="119"/>
            <mx:ComboBox id="locationGroupCB" labelField="name" prompt="n/a" selectedIndex="-1" dataProvider="{commonModelLocator.allLocationGroups}" width="200" x="148" y="117"/>
            <mx:CheckBox id="locationGroupCountingActiveChk" x="148" y="147" label="Counting Active in Location Group" selected="{selected.locationGroupCountingActive}"/>
            <mx:HRule x="10" y="177" width="350"/>

            <mx:Image x="10" y="187" mouseChildren="false" source="@Embed(source='/assets/images/LocationType.png')"/>
            <mx:Label text="Location Type" width="130" textAlign="right" x="10" y="187"/>
            <mx:ComboBox id="locationTypeCB" labelField="type" prompt="n/a" selectedIndex="-1" dataProvider="{commonModelLocator.allLocationTypes}" width="200" x="148" y="185"/>
            <mx:Text x="148" y="217" text="{locationTypeCB.selectedItem.description}" width="200"/>
            <mx:Text x="148" y="447" text="{selected.lastAccess}" width="200"/>
            <mx:HRule x="10" y="243" width="350"/>

            <mx:Label text="Max. Transport Units" width="130" textAlign="right" x="10" y="253"/>
            <mx:NumericStepper id="noMaxTransportUnitsTxt" value="{selected.noMaxTransportUnits}" width="40" x="148" y="251"/>

            <mx:Label text="Check State" width="130" textAlign="right" x="10" y="279"/>
            <mx:Text id="checkStateTxt" text="{selected.checkState}" width="200" x="148" y="279"/>

            <mx:Label text="PLC State" width="130" textAlign="right" x="10" y="305"/>
            <mx:TextInput id="plcStateTxt" text="{selected.plcState}" width="40" x="148" y="303"/>

            <mx:CheckBox id="countingActiveChk" x="148" y="333" label="Counting Active" selected="{selected.countingActive}"/>
            <mx:CheckBox id="incomingActiveChk" x="148" y="363" label="Incoming Active" selected="{selected.incomingActive}"/>
            <mx:CheckBox id="outgoingActiveChk" x="148" y="393" label="Outgoing Active" selected="{selected.outgoingActive}"/>
            <mx:CheckBox id="consideredInAllocationChk" x="148" y="423" label="Considered in Allocation" selected="{selected.consideredInAllocation}"/>

            <mx:Label x="72" y="447" text="Last Access"/>
            <mx:Text id="lastAccessTxt" x="148" y="463" width="200"/>

            <mx:Label x="80" y="473" text="Messages"/>
            <mx:TextArea x="148" y="472" width="180" height="64"/>
            <mx:VRule x="10" y="253" width="1" height="309" strokeWidth="0"/>
            <mx:Image x="332" y="473" height="16" width="16" mouseChildren="false" source="@Embed(source='assets/images/icons/plus.png')"/>
            <mx:Image x="332" y="497" height="16" width="16" mouseChildren="false" source="@Embed(source='assets/images/icons/minus.png')"/>

        </mx:Canvas>
    </mx:HBox>
</mx:Canvas>
