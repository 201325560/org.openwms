<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"  xmlns:comm="org.openwms.web.flex.client.common.component.*" xmlns:core="org.openwms.web.flex.client.component.*" width="100%" height="100%" backgroundColor="#C2DAEF" show="onShow();">

    <mx:Metadata>
        [Name]
        [ManagedEvent(name="LOAD_ALL_LOCATIONS")]
        [ManagedEvent(name="LOAD_ALL_LOCATION_GROUPS")]
        [ManagedEvent(name="SAVE_LOCATION_GROUP")]
        [ManagedEvent(name="LG.CHANGE_STATE")]
        [ResourceBundle("commonMain")]
        [ResourceBundle("commonEntity")]
    </mx:Metadata>

    <!-- Scripts -->
    <mx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;

            import org.granite.tide.spring.Identity;

            import org.openwms.web.flex.client.util.DisplayUtility;
            import org.openwms.web.flex.client.util.BindingProperty;
        	import org.openwms.web.flex.client.common.event.LocationGroupEvent;
            import org.openwms.web.flex.client.common.event.LocationEvent;
            import org.openwms.web.flex.client.common.model.TreeDataDescriptor;
            import org.openwms.web.flex.client.common.model.TreeNode;
            import org.openwms.web.flex.client.common.model.CommonModelLocator;
            import org.openwms.web.flex.client.common.helper.LocationGroupFormatter;
            import org.openwms.web.flex.client.common.helper.LocationFormatter;
            import org.openwms.web.flex.client.common.util.I18nUtil;
            import org.openwms.common.domain.values.LocationGroupState;
            import org.openwms.common.domain.LocationGroup;

            [Inject]
            [Bindable]
            /**
             * We need to have Granites Identity injected.
             */
            public var identity : Identity;
	        [Inject]
	        [Bindable]
            /**
             * Inject a model to work on.
             */
	        public var commonModelLocator : CommonModelLocator;

            [Bindable]
            private var selected : LocationGroup;
            [Bindable]
            private var selectedParent : String;
            [Bindable]
            private var selectedLocations : ArrayCollection = new ArrayCollection();
            [Bindable]
            [Embed("/assets/images/LocationGroup.png")]
            private var nodeIcon : Class;
            [Bindable]
            [Embed("/assets/images/LocationGroup--Leaf.png")]
            private var leafIcon : Class;
            [Bindable]
            [Embed("/assets/images/LocationGroup--Leaf--Locked.png")]
            private var leafIconLocked : Class;
            
            [Observer("LG.COLL_LOCATION_GROUPS_REFRESHED")]
            /**
             * Refresh the dataProvider of the tree UIComponent.
             * Observed event: LG.COLL_LOCATION_GROUPS_REFRESHED
             *
             * @param event Unused
             */
            public function refreshTree(event : LocationGroupEvent) : void {
                locationGroupTree.dataProvider.refresh();
            }

            /**
             * When the screen is shown, try to load all Locations and LocationGroups (when not already done before).
             */
            private function onShow() : void {
                if (commonModelLocator.allLocationGroups.length == 0) {
                    reload();
                }
                if (commonModelLocator.allLocations.length == 0) {
                    dispatchEvent(new LocationEvent(LocationEvent.LOAD_ALL_LOCATIONS));
                }
            }
            
            /**
             * Fire an event to save the selected LocationGroup.
             */
            private function saveLocationGroup() : void {
                var event:LocationGroupEvent = new LocationGroupEvent(LocationGroupEvent.SAVE_LOCATION_GROUP);
                event.data = selected;
                dispatchEvent(event);
            }

            /**
             * On a change event of one of the state comboboxes, fire an event to save the new state directly.
             * 
             * @param event Currently not used
             */
            private function changeState(event : Event) : void {
                var bindings:Array = [new BindingProperty(selected, "groupStateIn", groupStateInCmb, "selectedItem"),
                                    new BindingProperty(selected, "groupStateOut", groupStateOutCmb, "selectedItem")];
                DisplayUtility.bindProperties(new ArrayCollection(bindings), function execute() : void {
                        var evt : LocationGroupEvent = new LocationGroupEvent(LocationGroupEvent.CHANGE_STATE);
                        evt.data = selected;
                        dispatchEvent(evt);
                });
            }

            /**
             * Fire an event to reload all LocationGroups.
             */
            private function reload() : void {
                dispatchEvent(new LocationGroupEvent(LocationGroupEvent.LOAD_ALL_LOCATION_GROUPS));
            }

            private function onTreeClick(event : Event) : void {
                selected = event.target.selectedItem.getData() as LocationGroup;
                selectedParent = LocationGroupFormatter.formatParentLocationGroup(selected);
                groupStateInCmb.selectedIndex = LocationGroupState.constants.indexOf(selected.groupStateIn);
                groupStateOutCmb.selectedIndex = LocationGroupState.constants.indexOf(selected.groupStateOut);
                showLocations();
            }

            private function showLocations() : void {
                var locations : ArrayCollection = commonModelLocator.allLocations;
                selectedLocations.removeAll();
                for (var i : int = 0; i < locations.length; i++) {
                    if (locations[i].locationGroup != null &&
                        locations[i].locationGroup.id == selected.id) {
                        selectedLocations.addItem(locations[i]);
                    }
                }
            }

            private function getTreeIcon(item : Object) : Class {
                var node : TreeNode = item as TreeNode;
                if (node.getData() == null) {
                    return nodeIcon;
                }
                var lg : LocationGroup = node.getData() as LocationGroup;
                if (node.children == null) {
                    if (lg.groupStateIn == LocationGroupState.NOT_AVAILABLE ||
                        lg.groupStateOut == LocationGroupState.NOT_AVAILABLE) {
                        return leafIconLocked;
                    }
            		return leafIcon;
            	}
                if (lg.groupStateIn == LocationGroupState.NOT_AVAILABLE ||
                    lg.groupStateOut == LocationGroupState.NOT_AVAILABLE) {
                    return leafIconLocked;
                }
                return nodeIcon;
            }
        ]]>
    </mx:Script>

    <mx:HBox x="10" y="10" verticalAlign="middle" backgroundColor="#C6FFC7" width="95%">
        <mx:Label x="10" y="10" text="{I18nUtil.trans(I18nUtil.COMMON_MAIN, 'txt_locationGroupView_header')}" fontSize="24"/>
        <mx:VRule height="10"/>
        <mx:Button id="reloadBtn" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.COMMON_MAIN, 'ttip_locationGroup_reload_groups')}" icon="@Embed(source='assets/images/icons/refresh.png')" click="reload()"/>
        <mx:VRule height="10"/>
        <mx:Button id="saveLocationGroupBtn" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.COMMON_MAIN, 'ttip_locationGroup_save_group')}" icon="@Embed(source='/assets/images/Location--Save.png')" click="saveLocationGroup()"/>
    </mx:HBox>
    <mx:HRule x="10" y="53" width="95%"/>
    <mx:HBox x="10" y="63" verticalAlign="top" height="100%" width="95%">

        <mx:Tree id="locationGroupTree" showRoot="false" width="236" iconFunction="getTreeIcon" dataProvider="{commonModelLocator.locationGroupTree}" dataDescriptor="{new TreeDataDescriptor()}" labelFunction="{LocationGroupFormatter.formatLocationGroup}" change="onTreeClick(event)" height="95%" />

        <mx:Canvas width="100%" height="95%">
            <core:XPanel x="0" y="0" width="100%" height="300" layout="absolute" title="{I18nUtil.trans(I18nUtil.COMMON_MAIN, 'txt_locationGroupView_details_header')}" titleIcon="@Embed(source='/assets/images/LocationGroup.png')">

                <mx:HBox x="10" y="10" width="95%" height="25" borderStyle="solid" alpha="0.5" backgroundColor="#C2DAEF">
                    <mx:Label text="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_locationGroup')}" fontSize="16" textDecoration="normal" width="170" textAlign="right" fontWeight="bold"/>
                    <mx:Label text="{selected.name}" fontSize="16" textDecoration="normal" width="100%" toolTip="{selected.name}"/>
                </mx:HBox>

                <mx:HBox x="10" y="43" width="95%" height="18">
                    <mx:Label text="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_locationGroup_parent')}" width="170" textAlign="right"/>
                    <mx:Label text="{selectedParent}" width="100%"/>
                </mx:HBox>

                <mx:Label x="10" y="69" text="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_locationGroup_description')}" textAlign="right" width="170"/>
                <mx:TextArea x="188" y="68" width="200" text="{selected.description}"/>

                <mx:Label x="10" y="120" text="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_locationGroup_groupType')}" textAlign="right" width="170"/>
                <mx:Label text="{selected.groupType}" width="100%" x="190" y="120"/>

                <mx:Label x="10" y="146" text="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_locationGroup_groupStateIn')}" textAlign="right" width="170"/>
                <mx:ComboBox id="groupStateInCmb" editable="{identity.ifAllGranted('COMMON_LG_change_group_state_in')}" dataProvider="{LocationGroupState.constants}" change="changeState(event)" x="188" y="144" />

                <mx:Label x="10" y="176" text="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_locationGroup_groupStateOut')}" textAlign="right" width="170"/>
                <mx:ComboBox id="groupStateOutCmb" editable="{identity.ifAllGranted('COMMON_LG_change_group_state_out')}" dataProvider="{LocationGroupState.constants}" change="changeState(event)" x="188" y="174" />

                <mx:CheckBox label="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_locationGroup_countingActive')}" selected="{selected.locationGroupCountingActive}" x="277" y="206" />

                <mx:Label text="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_locationGroup_maxFillLevel')}" textAlign="right" width="170" x="10" y="208" />
                <mx:NumericStepper value="{selected.maxFillLevel}" deactivate="{identity &amp;&amp; !identity.ifAllGranted('COMMON_LG_change_max_fill_level')}" minimum="0" maximum="100" x="190" y="206" />

                <mx:Label text="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_locationGroup_systemCode')}" textAlign="right" width="170" x="10" y="234" />
                <mx:Label text="{selected.systemCode}" width="100%" x="188" y="234" />
            </core:XPanel>
            <mx:DataGrid id="locationsList" allowMultipleSelection="true" sortableColumns="true" x="0" y="341" width="100%" dataProvider="{selectedLocations}" height="100%">
                <mx:columns>
                    <comm:CoordinateColumn column="area" headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_locationId_area')}" labelFunction="{LocationFormatter.locationIdField}" editable="false" width="45" />
                    <comm:CoordinateColumn column="aisle" headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_locationId_aisle')}" labelFunction="{LocationFormatter.locationIdField}" editable="false" width="45"/>
                    <comm:CoordinateColumn column="x" headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_locationId_x')}" labelFunction="{LocationFormatter.locationIdField}" editable="false" width="45"/>
                    <comm:CoordinateColumn column="y" headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_locationId_y')}" labelFunction="{LocationFormatter.locationIdField}" editable="false" width="45"/>
                    <comm:CoordinateColumn column="z" headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_locationId_z')}" labelFunction="{LocationFormatter.locationIdField}" editable="false" width="45"/>
                    <mx:DataGridColumn headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_locationGroup')}" dataField="name" labelFunction="{LocationGroupFormatter.locationGroupField}" editable="false"/>
                    <mx:DataGridColumn headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_description')}" dataField="description" editable="true"/>
                    <mx:DataGridColumn headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_countingActive')}" dataField="countingActive" editable="true">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:CheckBox/>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_incomingActive')}" dataField="incomingActive" editable="true">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:CheckBox/>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_outgoingActive')}" dataField="outgoingActive" editable="true">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:CheckBox/>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="{I18nUtil.trans(I18nUtil.COMMON_ENTITY, 'entity_location_lastAccess')}" dataField="lastAccess" editable="false"/>
                </mx:columns>
            </mx:DataGrid>
            <mx:HBox verticalAlign="middle" backgroundColor="#C6FFC7" width="100%" x="0" y="308" backgroundAlpha="1.0">
                <mx:Label text="{I18nUtil.trans(I18nUtil.COMMON_MAIN, 'txt_locationGroupView_headerLocations')}" fontSize="16"/>
            </mx:HBox>
        </mx:Canvas>
    </mx:HBox>
</mx:Canvas>
