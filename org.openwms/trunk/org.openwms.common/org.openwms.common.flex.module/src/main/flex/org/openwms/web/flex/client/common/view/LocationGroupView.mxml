<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:x="org.openwms.web.flex.client.component.*" width="100%" height="100%" backgroundColor="#C2DAEF" show="onShow();">

    <mx:Metadata>
        [Name("locationGroupView")]
        [ManagedEvent(name="LOAD_ALL_LOCATIONS")]
        [ManagedEvent(name="LOAD_ALL_LOCATION_GROUPS")]
        [ManagedEvent(name="SAVE_LOCATION_GROUP")]
        [ManagedEvent(name="LG.CHANGE_STATE")]
    </mx:Metadata>

    <!-- Scripts -->
    <mx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import org.openwms.web.flex.client.util.DisplayUtility;
            import org.openwms.web.flex.client.util.BindingProperty;
            import org.openwms.web.flex.client.event.SwitchScreenEvent;
            import org.openwms.web.flex.client.common.event.CommonSwitchScreenEvent;
        	import org.openwms.web.flex.client.common.event.LocationGroupEvent;
            import org.openwms.web.flex.client.common.event.LocationEvent;
            import org.openwms.web.flex.client.common.model.TreeDataDescriptor;
            import org.openwms.web.flex.client.common.model.TreeNode;
            import org.openwms.web.flex.client.common.model.CommonModelLocator;
            import org.openwms.common.domain.values.LocationGroupState;
            import org.openwms.common.domain.LocationGroup;

	        [In]
	        [Bindable]
            /**
             * Inject a model to work on.
             */
	        public var commonModelLocator:CommonModelLocator;

            [Bindable]
            private var selected : LocationGroup;
            [Bindable]
            private var selectedParent : String;
            [Bindable]
            private var selectedLocations : ArrayCollection = new ArrayCollection();
            [Bindable]
            [Embed("/assets/images/LocationGroup.png")]
            private var nodeIcon:Class;
            [Bindable]
            [Embed("/assets/images/LocationGroup--Leaf.png")]
            private var leafIcon:Class;
            [Bindable]
            [Embed("/assets/images/LocationGroup--Leaf--Locked.png")]
            private var leafIconLocked:Class;
            
            [Observer("LG.COLL_LOCATION_GROUPS_REFRESHED")]
            public function refreshTree() : void {
                trace("Refresh tree fired");
                locationGroupTree.dataProvider.refresh();
            }

            /**
             * When the screen is opened, try to load all Locations and LocationGroups, when not already done before.
             */
            private function onShow() : void {
                if (commonModelLocator.allLocationGroups.length == 0) {
                    dispatchEvent(new LocationGroupEvent(LocationGroupEvent.LOAD_ALL_LOCATION_GROUPS));
                }
                if (commonModelLocator.allLocations.length == 0) {
                    dispatchEvent(new LocationEvent(LocationEvent.LOAD_ALL_LOCATIONS));
                }
            }
            
            /**
             * Fire an event to save the selected LocationGroup.
             */
            private function saveLocationGroup():void {
                var event:LocationGroupEvent = new LocationGroupEvent(LocationGroupEvent.SAVE_LOCATION_GROUP);
                event.data = selected;
                dispatchEvent(event);
            }

            /**
             * On a change event of one of the state comboboxes, fire an event to save the new state directly.
             */
            private function changeState(event : Event):void {
                var bindings:Array = [new BindingProperty(selected, "groupStateIn", groupStateInCmb, "selectedItem"),
                                    new BindingProperty(selected, "groupStateOut", groupStateOutCmb, "selectedItem")];
                DisplayUtility.bindProperties(new ArrayCollection(bindings), function execute():void {
                        var evt:LocationGroupEvent = new LocationGroupEvent(LocationGroupEvent.CHANGE_STATE);
                        evt.data = selected;
                        dispatchEvent(evt);
                });
            }

            /**
             * Fire an event to reload all LocationGroups.
             */
            private function refresh() : void {
                dispatchEvent(new LocationGroupEvent(LocationGroupEvent.LOAD_ALL_LOCATION_GROUPS));
            }

            private function switchView(e:Event) : void {
                // fire event
            }

            private function onTreeClick(event : Event) : void {
                selected = event.target.selectedItem.getData() as LocationGroup;
                selectedParent = formatParentLocationGroup();
                groupStateInCmb.selectedIndex = LocationGroupState.constants.indexOf(selected.groupStateIn);
                groupStateOutCmb.selectedIndex = LocationGroupState.constants.indexOf(selected.groupStateOut);
                showLocations();
            }

            private function showLocations() : void {
                var locations : ArrayCollection = commonModelLocator.allLocations;
                selectedLocations.removeAll();
                for (var i : uint = 0; i < locations.length; i++) {
                    if (locations[i].locationGroup == null) {
                        continue;
                    }
                    if (locations[i].locationGroup.id == selected.id) {
                        selectedLocations.addItem(locations[i]);
                    }
                }
            }

            private function formatLocationGroup(item : Object) : String {
                if (item != null) {
                    if (item.getData() != null) {
                        return item.getData()['name'];
                    } else {
                        return "";
                    }
                } else {
                    return "";
                }
            }

            private function formatParentLocationGroup() : String {
                if (selected.parent != null) {
                    return selected.parent.name;
                } else {
                    return "--";
                }
            }

            private function locationIdField(item : Object, dg : DataGridColumn) : String {
                return item.locationId[dg.dataField];
            }

            private function locationGroupField(item : Object, dg : DataGridColumn) : String {
                if (item.locationGroup != null) {
                    return item.locationGroup[dg.dataField];
                }
                return "--";
            }

            private function getTreeIcon(item:Object):Class {
                var node:TreeNode = item as TreeNode;
                var lg:LocationGroup = node.getData() as LocationGroup;
                if (node.children == null) {
                    if (lg.groupStateIn == LocationGroupState.NOT_AVAILABLE ||
                        lg.groupStateOut == LocationGroupState.NOT_AVAILABLE) {
                        return leafIconLocked;
                    }
            		return leafIcon;
            	}
                if (lg.groupStateIn == LocationGroupState.NOT_AVAILABLE ||
                    lg.groupStateOut == LocationGroupState.NOT_AVAILABLE) {
                    return leafIconLocked;
                }
                return nodeIcon;
            }
        ]]>
    </mx:Script>

    <mx:HBox x="10" y="10" verticalAlign="middle" backgroundColor="#C6FFC7" width="95%">
        <mx:Label x="10" y="10" text="Location Groups" fontSize="24"/>
        <mx:VRule height="10"/>
        <mx:Button id="refreshBtn" buttonMode="true" mouseChildren="false" toolTip="Refresh Location Groups" icon="@Embed(source='assets/images/icons/refresh.png')" click="refresh()"/>
        <mx:VRule height="10"/>
        <mx:Button id="saveLocationGroupBtn" buttonMode="true" mouseChildren="false" toolTip="Save an existing Location Group" icon="@Embed(source='/assets/images/Location--Save.png')" click="saveLocationGroup()"/>
    </mx:HBox>
    <mx:HRule x="10" y="53" width="95%"/>
    <mx:HBox x="10" y="63" verticalAlign="top" height="100%" width="95%">

        <mx:Tree id="locationGroupTree" showRoot="false" width="236" iconFunction="getTreeIcon" dataProvider="{commonModelLocator.locationGroupTree}" dataDescriptor="{new TreeDataDescriptor()}" labelFunction="formatLocationGroup" change="onTreeClick(event)" height="95%" />

        <mx:Canvas width="100%" height="95%">
            <x:XPanel x="0" y="0" width="100%" height="300" layout="absolute" title="Details" titleIcon="@Embed(source='/assets/images/LocationGroup.png')" toolTipBtn1="Switch View" onClickBtn1="switchView" iconBtn1="@Embed(source='assets/images/icons/switchView--small.png')">

                <mx:HBox x="10" y="10" width="95%" height="25" borderStyle="solid" alpha="0.5" backgroundColor="#C2DAEF">
                    <mx:Label text="Location Group" fontSize="16" textDecoration="normal" width="170" textAlign="right" fontWeight="bold"/>
                    <mx:Label text="{selected.name}" fontSize="16" textDecoration="normal" width="100%" toolTip="{selected.name}"/>
                </mx:HBox>

                <mx:HBox x="10" y="43" width="95%" height="18">
                    <mx:Label text="Parent Location Group" width="170" textAlign="right"/>
                    <mx:Label text="{selectedParent}" width="100%"/>
                </mx:HBox>

                <mx:Label x="10" y="69" text="Description" textAlign="right" width="170"/>
                <mx:TextArea x="188" y="68" width="200" text="{selected.description}"/>

                <mx:Label x="10" y="120" text="Group Type" textAlign="right" width="170"/>
                <mx:Label text="{selected.groupType}" width="100%" x="190" y="120"/>

                <mx:Label x="10" y="146" text="Infeed" textAlign="right" width="170"/>
                <mx:ComboBox id="groupStateInCmb" x="188" y="144" dataProvider="{LocationGroupState.constants}" change="changeState(event)" />

                <mx:Label x="10" y="176" text="Outfeed" textAlign="right" width="170"/>
                <mx:ComboBox id="groupStateOutCmb" x="188" y="174" dataProvider="{LocationGroupState.constants}" change="changeState(event)" />

                <mx:CheckBox x="277" y="206" label="Counting active" selected="{selected.locationGroupCountingActive}"/>

                <mx:Label x="10" y="208" text="Maximum Fill Level" textAlign="right" width="170"/>
                <mx:NumericStepper x="190" y="206" value="{selected.maxFillLevel}" minimum="0" maximum="100" />

                <mx:Label x="10" y="234" text="System Code" textAlign="right" width="170"/>
                <mx:Label text="{selected.systemCode}" width="100%" x="188" y="234"/>
            </x:XPanel>
            <mx:DataGrid id="locationsList" allowMultipleSelection="true" sortableColumns="true" x="0" y="341" width="100%" dataProvider="{selectedLocations}" height="100%">
                <mx:columns>
                    <mx:DataGridColumn dataField="area" labelFunction="locationIdField" editable="false" width="50">
                        <mx:headerRenderer>
                            <mx:Component>
                                <mx:Label text="Area" styleName="headerArea"/>
                            </mx:Component>
                        </mx:headerRenderer>
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="Aisle" dataField="aisle" labelFunction="locationIdField" editable="false" width="50"/>
                    <mx:DataGridColumn headerText="X" dataField="x" labelFunction="locationIdField" editable="false" width="50"/>
                    <mx:DataGridColumn headerText="Y" dataField="y" labelFunction="locationIdField" editable="false" width="50"/>
                    <mx:DataGridColumn headerText="Z" dataField="z" labelFunction="locationIdField" editable="false" width="50"/>
                    <mx:DataGridColumn headerText="Location Group" dataField="name" labelFunction="locationGroupField" editable="false"/>
                    <mx:DataGridColumn headerText="Description" dataField="description" editable="true"/>
                    <mx:DataGridColumn headerText="Counting Active" dataField="countingActive" editable="true">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:CheckBox/>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="Incoming Active" dataField="incomingActive" editable="true">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:CheckBox/>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="Outgoing Active" dataField="outgoingActive" editable="true">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:CheckBox/>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="Last Access" dataField="lastAccess" editable="false"/>
                </mx:columns>
            </mx:DataGrid>
            <mx:HBox verticalAlign="middle" backgroundColor="#C6FFC7" width="100%" x="0" y="308" backgroundAlpha="1.0">
                <mx:Label text="Locations" fontSize="16"/>
                <mx:VRule height="10"/>
            </mx:HBox>
        </mx:Canvas>
    </mx:HBox>
</mx:Canvas>
