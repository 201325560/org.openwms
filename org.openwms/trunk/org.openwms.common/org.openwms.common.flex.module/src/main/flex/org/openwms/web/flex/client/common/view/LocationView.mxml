<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundColor="#C2DAEF" show="onShow()">

    <mx:Metadata>
        [Name("locationView")]
        [ManagedEvent(name="LOAD_ALL_LOCATIONS")]
        [ManagedEvent(name="LOAD_ALL_LOCATION_TYPES")]
        [ManagedEvent(name="LOAD_ALL_LOCATION_GROUPS")]
        [ManagedEvent(name="SAVE_LOCATION")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        	import mx.controls.Alert;
        	import mx.managers.PopUpManager;
            import org.openwms.web.flex.client.util.DisplayUtility;
            import org.openwms.web.flex.client.util.BindingProperty;
            import org.openwms.web.flex.client.common.event.LocationEvent;
            import org.openwms.web.flex.client.common.event.LocationTypeEvent;
            import org.openwms.web.flex.client.common.event.LocationGroupEvent;
        	import org.openwms.common.domain.LocationGroup;
        	import org.openwms.common.domain.LocationType;
        	import org.openwms.common.domain.Location;
            import org.openwms.web.flex.client.common.model.CommonModelLocator;
            import mx.controls.dataGridClasses.DataGridColumn;
            import mx.collections.ArrayCollection;
            import mx.events.ListEvent;

            [Inject]
            [Bindable]
            /**
             * Inject a model to work on.
             */
            public var commonModelLocator:CommonModelLocator;

            [Bindable]
            private var selected:Location;

            [Bindable]
            private var listLocationGroups:ArrayCollection=new ArrayCollection();

            private function onShow():void {
                if (commonModelLocator.allLocations.length == 0) {
                    dispatchEvent(new LocationEvent(LocationEvent.LOAD_ALL_LOCATIONS));
                }
                if (commonModelLocator.allLocationTypes.length == 0) {
                	dispatchEvent(new LocationTypeEvent(LocationTypeEvent.LOAD_ALL_LOCATION_TYPES));
                }
                if (commonModelLocator.allLocationGroups.length == 0) {
                	dispatchEvent(new LocationGroupEvent(LocationGroupEvent.LOAD_ALL_LOCATION_GROUPS));
                }
            }

            private function onRowClick(event:ListEvent):void {
            	selected = event.currentTarget.selectedItem as Location;
                locationGroupCB.selectedIndex = commonModelLocator.allLocationGroups.getItemIndex(selected.locationGroup);
                locationTypeCB.selectedIndex = commonModelLocator.allLocationTypes.getItemIndex(selected.locationType);
                if (selected.lastAccess != null) {
                    lastAccessTxt.text = commonModelLocator.dateTimeFormatter.format(selected.lastAccess);
                }
            }

            private function locationIdField(item:Object, dg:DataGridColumn):String {
                return item[dg.dataField];
            }

            private function locationGroupField(item:Object, dg:DataGridColumn):String {
                if (item.locationGroup != null) {
                    return item.locationGroup[dg.dataField];
                }
                return "n/a";
            }

            private function formatDateField(item:Object, dg:DataGridColumn):String {
                if (item.lastAccess != null) {
                    return commonModelLocator.dateTimeFormatter.format(item.lastAccess);
                }
                return "n/a";
            }

            private function sortLocationGroup(obj1:Object, obj2:Object):int {
                var name1:String = obj1.locationGroup != null ? obj1.locationGroup.name : "";
                var name2:String = obj2.locationGroup != null ? obj2.locationGroup.name : "";
                
                if(name1 < name2) {
                    return -1;
                } else  if(name1 > name2) {
                    return 1;
                } else {
                    return 0;
                }
            }

            /**
             * Action on button save Loactions.
             */
            private function saveLocation():void {
               var bindings:Array = [new BindingProperty(selected, "description", descriptionTxt, "text"),
                                     new BindingProperty(selected, "locationGroup", locationGroupCB, "selectedItem"),  
                                     new BindingProperty(selected, "locationType", locationTypeCB, "selectedItem"),  
                                     new BindingProperty(selected, "noMaxTransportUnits", noMaxTransportUnitsTxt, "value"),
                                     new BindingProperty(selected, "plcState", plcStateTxt, "text"),
                                     new BindingProperty(selected, "countingActive", countingActiveChk, "selected"),
                                     new BindingProperty(selected, "incomingActive", incomingActiveChk, "selected"),
                                     new BindingProperty(selected, "outgoingActive", outgoingActiveChk, "selected"),
                                     new BindingProperty(selected, "consideredInAllocation", consideredInAllocationChk, "selected")];
                                     
                DisplayUtility.bindProperties(new ArrayCollection(bindings), function execute():void {
                        var event:LocationEvent = new LocationEvent(LocationEvent.SAVE_LOCATION);
                        event.data=selected;
                        dispatchEvent(event);
                    });
                selected = null;                            
            }

            /**
             * Action on button refresh Loactions.
             */
            private function refresh():void {
            	selected = null;
                var event:LocationEvent = new LocationEvent(LocationEvent.LOAD_ALL_LOCATIONS);
                dispatchEvent(event);
            }

        ]]>
    </mx:Script>

    <mx:HBox x="10" y="10" verticalAlign="middle" backgroundColor="#C6FFC7" backgroundAlpha="0.5" width="95%" >
        <mx:Label x="10" y="10" text="Locations" fontSize="24"/>
        <mx:VRule height="10"/>
        <mx:Button id="saveLocationBtn" buttonMode="true" mouseChildren="false" toolTip="Save an existing Location" icon="@Embed(source='/assets/images/Location--Save.png')" click="saveLocation()"/>
        <mx:VRule height="10"/>
        <mx:Button id="refreshLocationBtn" buttonMode="true" mouseChildren="false" toolTip="Refresh the list of Locations" icon="@Embed(source='assets/images/icons/refresh.png')" click="refresh()"/>
    </mx:HBox>
    <mx:HRule x="9" y="53" width="95%"/>
    <mx:HBox height="100%" width="95%" x="10" y="63">
        <mx:Canvas id="locationDetailsPnl" backgroundColor="#C6FFC7" backgroundAlpha="0.5" height="100%" width="325">
            
            <mx:Image x="10" y="10" mouseChildren="false" source="@Embed(source='/assets/images/Location.png')"/>
            <mx:Label text="Location" fontWeight="bold" textAlign="left" x="34" y="10"/>
            <mx:Text text="{selected.locationId.toString()}" width="212" fontWeight="bold" x="95" y="10"/>
            
            <mx:Label text="Description" textAlign="left" x="10" y="34"/>
            <mx:TextArea id="descriptionTxt" text="{selected.description}" width="200" height="64" x="95" y="33"/>
            <mx:HRule x="10" y="400" width="297"/>
            <mx:HRule x="10" y="10" width="360" strokeWidth="0"/>
            
            <mx:Image x="10" y="410" mouseChildren="false" source="@Embed(source='/assets/images/LocationGroup.png')"/>
            <mx:Label text="Location Group" textAlign="left" x="34" y="414" fontWeight="bold"/>
            <mx:ComboBox id="locationGroupCB" labelField="name" prompt="n/a" selectedIndex="{commonModelLocator.allLocationGroups.getItemIndex(selected)}" dataProvider="{commonModelLocator.allLocationGroups}" width="200" x="95" y="440"/>
            <mx:CheckBox id="locationGroupCountingActiveChk" x="83" y="470" label="Counting Active in Location Group" selected="{selected.locationGroupCountingActive}"/>
            <mx:HRule x="8" y="500" width="297"/>
            
            <mx:Image x="10" y="510" mouseChildren="false" source="@Embed(source='/assets/images/LocationType.png')"/>
            <mx:Label text="Location Type" textAlign="left" x="34" y="510" fontWeight="bold"/>
            <mx:ComboBox id="locationTypeCB" labelField="type" prompt="n/a" selectedIndex="{commonModelLocator.allLocationTypes.getItemIndex(selected.locationType)}" dataProvider="{commonModelLocator.allLocationTypes}" width="200" x="95" y="562"/>
            <mx:Text x="95" y="536" text="{locationTypeCB.selectedItem.description}"/>
            
            <mx:Label text="Max. Transport Units" textAlign="left" x="10" y="105"/>
            <mx:NumericStepper id="noMaxTransportUnitsTxt" value="{selected.noMaxTransportUnits}" width="40" x="255" y="103"/>
            
            <mx:Label text="Check State" textAlign="left" x="10" y="251"/>
            <mx:Text id="checkStateTxt" text="{selected.checkState}" x="95" y="251"/>
            
            <mx:Label text="PLC State" textAlign="left" x="10" y="303"/>
            <mx:TextInput id="plcStateTxt" text="{selected.plcState}" width="40" x="95" y="301"/>
            
            <mx:CheckBox id="countingActiveChk" x="95" y="191" label="Counting Active" selected="{selected.countingActive}"/>
            <mx:CheckBox id="incomingActiveChk" x="95" y="131" label="Incoming Active" selected="{selected.incomingActive}"/>
            <mx:CheckBox id="outgoingActiveChk" x="95" y="161" label="Outgoing Active" selected="{selected.outgoingActive}"/>
            <mx:CheckBox id="consideredInAllocationChk" x="95" y="221" label="Considered in Allocation" selected="{selected.consideredInAllocation}"/>
            
            <mx:Label x="10" y="277" text="Last Access"/>
            <mx:Text id="lastAccessTxt" x="95" y="277" text="{selected.lastAccess}"/>
            
            <mx:Label x="10" y="329" text="Messages"/>
            <mx:TextArea x="95" y="328" width="180" height="64"/>
            <mx:Image x="283" y="328" height="16" width="16" mouseChildren="false" source="@Embed(source='assets/images/icons/minus.png')"/>
        
        </mx:Canvas>
        <mx:DataGrid id="locationsList" allowMultipleSelection="true" sortableColumns="true" height="100%" width="100%" dataProvider="{commonModelLocator.allLocations}" change="onRowClick(event)">
            <mx:columns>
                <mx:DataGridColumn dataField="locationId" labelFunction="locationIdField" editable="false" width="45">
                    <mx:headerRenderer>
                        <mx:Component>
                            <mx:Label text="Area" styleName="headerArea"/>
                        </mx:Component>
                    </mx:headerRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="Aisle" dataField="locationId" labelFunction="locationIdField" editable="false" width="45"/>
                <mx:DataGridColumn headerText="X" dataField="locationId" labelFunction="locationIdField" editable="false" width="45"/>
                <mx:DataGridColumn headerText="Y" dataField="locationId" labelFunction="locationIdField" editable="false" width="45"/>
                <mx:DataGridColumn headerText="Z" dataField="locationId" labelFunction="locationIdField" editable="false" width="45"/>
                <mx:DataGridColumn headerText="Location Group" dataField="locationGroup" sortCompareFunction="sortLocationGroup" editable="false"/>
                <mx:DataGridColumn headerText="Description" dataField="description" editable="true"/>
                <mx:DataGridColumn headerText="Counting Active" dataField="countingActive" editable="true">
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:CheckBox/>
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="Incoming Active" dataField="incomingActive" editable="true">
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:CheckBox/>
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="Outgoing Active" dataField="outgoingActive" editable="true">
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:CheckBox/>
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="Last Access" dataField="lastAccess" labelFunction="formatDateField" editable="false" />
            </mx:columns>
        </mx:DataGrid>
    </mx:HBox>
</mx:Canvas>
