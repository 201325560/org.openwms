<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml">

    <mx:Metadata>
        [Name]
        [Event(name="preferenceSelectionChanged", type="org.openwms.web.flex.client.event.PropertyEvent")]
    </mx:Metadata>

	<mx:Script>
	<![CDATA[
	    import mx.events.ListEvent;
	    import mx.collections.ArrayCollection;
	    import org.openwms.web.flex.client.util.CollectionUtil;
	    import org.openwms.web.flex.client.event.PropertyEvent;
	
	    [Bindable]
        /**
         * Name of the key property, used as labelField in the list.
         */
	    public var keyField : String;

	    [Bindable]
        /**
         * All Preferences shown in this list.
         */
	    public var dataCollection : ArrayCollection;

        /**
         * Call to update the internal dataProvider model.
         * 
         * @para data Expected to get a Dictionary of preferences
         */
        public function updateModel(data : Dictionary) : void {
            dataCollection = CollectionUtil.toArrayCollection(data);            
        }

        /**
         * Dispatch a plain Flex event, because it is not possible to tie this type of component to a GDS
         * context within a loop. Fire a PropertyEvent that stores the selectedItem of the List in its data field.
         * 
         * @event Fetch the selectedItem of the ListEvent and put it into the data field.
         */
        private function onSelected(event : ListEvent) : void {
            var e : PropertyEvent = new PropertyEvent("preferenceSelectionChanged");
            e.data = event.currentTarget.selectedItem;
       		dispatchEvent(e);
        }
        
    ]]>
	</mx:Script>

    <mx:List id="prefsLst" labelField="{keyField}" itemClick="onSelected(event)" dataProvider="{dataCollection}" alternatingItemColors="[#EEEEEE, #FFFFFF]" width="100%" height="100%" x="0" y="0" />
  
</mx:Canvas>
