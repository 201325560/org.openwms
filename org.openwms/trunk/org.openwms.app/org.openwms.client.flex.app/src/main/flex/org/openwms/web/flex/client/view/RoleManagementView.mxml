<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundColor="#C2DAEF" creationComplete="init()">

    <mx:Metadata>
        [Name]
        [ManagedEvent(name="LOAD_ALL_USERS")]
        [ManagedEvent(name="LOAD_ALL_ROLES")]
        [ManagedEvent(name="SAVE_ROLE")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
            import mx.managers.PopUpManager;
            import mx.controls.Alert;
            import mx.controls.dataGridClasses.DataGridColumn;
            import mx.collections.ArrayCollection;
            import mx.events.ListEvent;

            import org.granite.tide.spring.Context;
            import org.granite.tide.spring.Identity;
            import org.granite.tide.events.TideResultEvent;

            import org.openwms.core.domain.system.usermanagement.SecurityObject;
            import org.openwms.core.domain.system.usermanagement.User;
            import org.openwms.core.domain.system.usermanagement.Role;
            import org.openwms.web.flex.client.model.ModelLocator;
            import org.openwms.web.flex.client.event.RoleEvent;
        	import org.openwms.web.flex.client.event.ApplicationEvent;
        	import org.openwms.web.flex.client.event.UserEvent;
        	import org.openwms.web.flex.client.view.dialogs.AssignUsersDialog;
            import org.openwms.web.flex.client.view.dialogs.AssignGrantsDialog;
        	import org.openwms.web.flex.client.view.dialogs.ConfirmDeleteRoleDialog;
        	import org.openwms.web.flex.client.view.dialogs.CreateRoleDialog;
            
            [Inject]
            [Bindable]
            /**
             * Injected Model.
             */
            public var modelLocator:ModelLocator;            
            [Inject]
            [Bindable]
            /**
             * Injected Tide identity object.
             */
            public var iden : Identity;
            [In]
            /**
             * Injected context.
             */
            public var tideContext:Context;
            [Bindable]
            private var selected:Role;
            [Bindable]
            private var res:Boolean;

            private function init():void {
                dispatchEvent(new RoleEvent(RoleEvent.LOAD_ALL_ROLES));
                if (modelLocator.allUsers.length == 0) {
                    dispatchEvent(new UserEvent(UserEvent.LOAD_ALL_USERS));
                }
                trace("any"+iden.ifAnyGranted('COMMON_add_roles_button', reHandler));
                trace("all"+iden.ifAllGranted('COMMON_add_roles_button', reHandler));
                trace("not"+iden.ifNotGranted('COMMON_add_roles_button', reHandler));
                trace("not"+iden.ifNotGranted('COMMON_remove_role_button', reHandler));
            }
            
            private function reHandler(event:TideResultEvent):void {
                res = event.result as Boolean;
                trace("res:"+res);
            } 

            private function onRowClick(event:ListEvent):void {
                selected = event.currentTarget.selectedItem as Role;
            }

            /**
             * Double clicking an entry opens the edit dialogue.
             */ 
            private function onDoubleClick(event:MouseEvent):void {
            	selected = event.currentTarget.selectedItem as Role;
                var pop:CreateRoleDialog = CreateRoleDialog(PopUpManager.createPopUp(this, CreateRoleDialog, true));
                pop.roleToChange = event.currentTarget.selectedItem as Role;
                pop.title = "Change Role settings";
                PopUpManager.centerPopUp(pop);
            }

            /**
             * Open dialogue to add a new Role.
             */
            private function add():void {
                var pop:CreateRoleDialog = CreateRoleDialog(PopUpManager.createPopUp(this, CreateRoleDialog, true));
                PopUpManager.centerPopUp(pop);
            }

            /**
             * Open confirm dialogue to accept deletion of a Role.
             */
            private function remove():void {
                if (lst.selectedIndices.length == 0) {
                    Alert.show("Please select at least one Role to delete");
                    return;                 
                }
                var pop:ConfirmDeleteRoleDialog = ConfirmDeleteRoleDialog(PopUpManager.createPopUp(this, ConfirmDeleteRoleDialog, true));
                pop.items = new ArrayCollection(lst.selectedItems);
                PopUpManager.centerPopUp(pop);
            }

            /**
             * Fire event to save the selected Role.
             */
            private function save():void {
                if (lst.selectedIndices.length == 0) {
                    Alert.show("Please select a Role to save");
                    return;                 
                }
                var event:RoleEvent = new RoleEvent(RoleEvent.SAVE_ROLE);
                event.data = selected;
                dispatchEvent(event);
            }
            
            /**
             * Add more Users to a Role.
             */
            private function addUsers():void {
                if (selected == null) {
                    Alert.show("Please select a Role to add a User for");
                    return;
                }
                var pop:AssignUsersDialog = AssignUsersDialog(PopUpManager.createPopUp(this, AssignUsersDialog, true));
                pop.assigned = selected.users;
                pop.role = selected;
                PopUpManager.centerPopUp(pop);            	
            }
            
            /**
             * Assign more Grants to a Role.
             */
            private function addGrants():void {
                if (selected == null) {
                    Alert.show("Please select a Role to assign Grants to it");
                    return;
                }
                var pop:AssignGrantsDialog = AssignGrantsDialog(PopUpManager.createPopUp(this, AssignGrantsDialog, true));
                pop.assigned = selected.grants;
                pop.role = selected;
                PopUpManager.centerPopUp(pop);              
            }

            /**
             * Remove Users from an already existing Role.
             */
            private function removeUsers():void {
                if (selected == null) {
                    Alert.show("Please select a Role to remove a User from");
                    return;
                }
                if (usersLst.selectedItems.length == 0) {
                    Alert.show("Please select one or more Users to be removed from this Role");
                    return;
                }
            	for each (var selectedUser:User in usersLst.selectedItems) {
            		for each (var user:User in selected.users) {
                        if (user.username == selectedUser.username) {
                        	selected.users.removeItemAt(selected.users.getItemIndex(user));
                        }
                    } 
                }
            }

            /**
             * Reload the list of Roles.
             */
            private function refresh():void {
                dispatchEvent(new RoleEvent(RoleEvent.LOAD_ALL_ROLES));
            }
            
            /**
             * Define how User information is displayed.
             */
            private function formatUser(item:*):String {
            	return (item as User).fullname+" ("+(item as User).username+")";
            }

            /**
             * Define how Grant information is displayed.
             */
            private function formatGrant(item:*):String {
                return (item as SecurityObject).description + " (" + (item as SecurityObject).name + ")";
            }
        ]]>
    </mx:Script>

    <mx:HBox x="10" y="10" width="95%" verticalAlign="middle" backgroundColor="#FFA6A6">
        <mx:Label x="10" y="10" text="Roles" fontSize="24"/>
        <mx:VRule height="10"/>
        <mx:Button id="addRoleBtn" visible="{iden.ifAnyGranted('COMMON_add_roles_button')}" buttonMode="true" mouseChildren="false" toolTip="Create a new Role" icon="@Embed(source='/assets/images/Users--plus.png')" click="add()"/>
        <mx:VRule height="10" visible="{iden.ifAnyGranted('COMMON_add_roles_button')}"/>
        <mx:Button id="removeRoleBtn" visible="{iden.ifAnyGranted('COMMON_remove_role_button')}" buttonMode="true" mouseChildren="false" toolTip="Delete an existing Role" icon="@Embed(source='/assets/images/Users--minus.png')" click="remove()"/>
        <mx:VRule height="10" visible="{iden.ifAnyGranted('COMMON_remove_role_button')}"/>
        <mx:Button id="saveRoleBtn" visible="{iden.ifAnyGranted('COMMON_save_role_button')}" buttonMode="true" mouseChildren="false" toolTip="Save a modified Role" icon="@Embed(source='/assets/images/Users--save.png')" click="save()"/>
        <mx:VRule height="10" visible="{iden.ifAnyGranted('COMMON_save_role_button')}" />
        <mx:Button id="refreshRoleBtn" buttonMode="true" mouseChildren="false" toolTip="Refresh the list of Roles" icon="@Embed(source='assets/images/icons/refresh.png')" click="refresh()"/>
    </mx:HBox>
    <mx:HRule x="9" y="53" width="95%"/>
    <mx:VBox height="100%" width="95%" x="10" y="63">
        <mx:VBox width="100%">
            <mx:DataGrid id="lst" height="200" width="100%" allowMultipleSelection="true" dataProvider="{modelLocator.allRoles}" change="onRowClick(event);" doubleClickEnabled="true" doubleClick="onDoubleClick(event);">
                <mx:columns>
                    <mx:DataGridColumn headerText="Name" dataField="name" editable="false" width="100"/>
                    <mx:DataGridColumn headerText="Description" dataField="description" editable="false"/>
                </mx:columns>
            </mx:DataGrid>
            <mx:HBox width="100%">
	            <mx:VBox width="50%">
	                <mx:HBox verticalAlign="middle" backgroundColor="#FFA6A6" width="100%" backgroundAlpha="0.5" horizontalGap="8" height="25">
	                    <mx:Label x="10" y="10" text="Assigned Grants" fontSize="10"/>
	                    <mx:VRule height="10" visible="{iden.ifAnyGranted('COMMON_assign_grants_button')}"/>
	                    <mx:Button id="assignedGrantsBtn" visible="{iden.ifAnyGranted('COMMON_assign_grants_button')}" width="22" height="22" buttonMode="true" mouseChildren="false" toolTip="Assign Grants to the selected Role" click="addGrants()" icon="@Embed(source='assets/images/icons/grant--add.png')"/>
	                </mx:HBox>
	                <mx:List id="grantsLst" height="200" width="100%" allowMultipleSelection="true" labelFunction="formatGrant" dataProvider="{selected.grants}"/>
	            </mx:VBox>
	            <mx:VBox width="50%">
			        <mx:HBox verticalAlign="middle" backgroundColor="#FFA6A6" width="100%" height="25" backgroundAlpha="0.5">
			            <mx:Label x="10" y="10" text="Assigned Users" fontSize="10"/>
			            <mx:VRule height="10" visible="{iden.ifAnyGranted('COMMON_assign_users_button')}"/>
			            <mx:Button id="assignedUsersBtn" visible="{iden.ifAnyGranted('COMMON_assign_users_button')}" width="22" height="22" buttonMode="true" mouseChildren="false" toolTip="Assign Users to the selected Role" click="addUsers()" icon="@Embed(source='/assets/images/User--plus.png')"/>
			            <mx:VRule height="10" visible="{iden.ifAnyGranted('COMMON_assign_users_button')}"/>
			            <mx:Button id="removeUsersBtn" visible="{iden.ifAnyGranted('COMMON_assign_users_button')}" width="22" height="22" buttonMode="true" mouseChildren="false" toolTip="Remove Users from the selected Role" click="removeUsers()" icon="@Embed(source='/assets/images/User--minus.png')"/>
			        </mx:HBox>
	                <mx:List id="usersLst" height="200" width="100%" allowMultipleSelection="true" labelFunction="formatUser" dataProvider="{selected.users}" />
	            </mx:VBox>
            </mx:HBox>
        </mx:VBox>
    </mx:VBox>
</mx:Canvas>
