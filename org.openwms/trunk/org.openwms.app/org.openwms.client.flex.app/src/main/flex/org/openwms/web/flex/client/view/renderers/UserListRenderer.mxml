<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" showEffect="Fade" width="100%" height="40"
	creationComplete="onCreate();">

    <mx:Metadata>
        [Name]
        [Event(name="userSelectionChanged", type="flash.events.Event")]
    </mx:Metadata>

	<mx:Script>
	<![CDATA[
    	import mx.effects.Fade;
    	import mx.effects.Blur;
    	import mx.effects.Parallel;
    	import mx.effects.Move;
    	import mx.core.IUIComponent;
    	import mx.core.UIComponent;
    	import mx.core.BitmapAsset;
    	import mx.core.DragSource;
    	import mx.controls.Alert;
        import mx.managers.DragManager;

		import org.openwms.web.flex.client.model.ModelLocator;
        import org.openwms.web.flex.client.event.UserEvent;
        import org.openwms.web.flex.client.util.UserHelper;
        import org.openwms.core.domain.system.usermanagement.User;
        import org.openwms.core.domain.system.usermanagement.UserDetails;
        import org.openwms.core.domain.system.usermanagement.UserDetails$SEX;

        [Inject]
        [Bindable]
        /**
         * Inject the model.
         */
        public var modelLocator : ModelLocator;            
        [Bindable]
        /**
         * User data preset by the surrounding userList.
         */
        public var userData : User;
        [Bindable]
        /**
         * Default CSS style class.
         */
        public var style : String = "userListItem";

		[Bindable]
		[Embed(source = "/assets/images/userDefaultUniSex.jpg")]
       	private var uniSexImage : Class;
		[Bindable]
		[Embed(source = "/assets/images/userDefaultMan.jpg")]
       	private var manImage : Class;
		[Bindable]
		[Embed(source = "/assets/images/userDefaultWoman.jpg")]
       	private var womanImage : Class;

		/**
		 * Initializing the component. Filling all fields with user data.
		 */
        private function onCreate() : void {
    	    userFullname.text = userData.fullname;
        	userName.text = userData.username;
        	setUserImage();
        	moveItem();
        }
        
		/**
		 * Setting the small user preview image depending on the user's sex.
		 */ 
		private function setUserImage() : void {
			var asset : BitmapAsset;
			if (UserHelper.hasDetails(userData)) {
				if (userData.userDetails.image != null) {
					img.data = userData.userDetails.image;
					return;
				}
				if (userData.userDetails.sex == UserDetails$SEX.MALE) {
				 	asset = new manImage() as BitmapAsset;
				} else if (userData.userDetails.sex == UserDetails$SEX.FEMALE) {
					asset = new womanImage() as BitmapAsset;
				} else {
					asset = new uniSexImage() as BitmapAsset;
				}
			} else {
				asset = new uniSexImage() as BitmapAsset;
			}
			img.source = asset;
		}

		/**
		 * This method stores the selected user in the ModelSelector as selectedUser.
		 * It also sends an Event to change settings in the main content panel
		 * When the User has no UserDetails, a new set is instantiated.
		 */
		public function setSelectedItem() : void {
			modelLocator.selectedUser = this.userData; 
       		dispatchEvent(new Event("userSelectionChanged", true));
		}
		
		/**
		 * Move this item from the left side into the surrounding container.
		 */
        public function moveItem() : void {
			var parallel:Parallel = new Parallel(); 
			parallel.target = userListItem; 
			
			var blur:Blur = new Blur(); 
			blur.blurXFrom = 5; 
			blur.blurXTo = 0; 
			blur.blurYFrom = 5; 
			blur.blurYTo = 0; 
			
			var move:Move = new Move(); 
			move.target = this; 
			move.xFrom = -1000; 
			move.xTo = 5; 
			move.play(); 
			
			parallel.addChild(blur); 				
			parallel.addChild(move); 
			parallel.play();
		}
    ]]>
	</mx:Script>

	<mx:HBox id="userListItem" width="95%" height="40" useHandCursor="true" mouseChildren="false" buttonMode="true"
		horizontalScrollPolicy="off" verticalScrollPolicy="off" click="setSelectedItem()" styleName="{style}" horizontalGap="8">
		<mx:Image id="img" height="40" width="40" />
		<mx:VBox width="100%" verticalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="userListContainer">
			<mx:Label id="userName" styleName="userNameListFont" />
			<mx:Label id="userFullname" styleName="userFullnameListFont" />
		</mx:VBox>
	</mx:HBox>
</mx:Canvas>