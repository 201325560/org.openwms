<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */Module is currently loaded, click to unload
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundAlpha="0.0" creationComplete="init()">

    <mx:Metadata>
        [Name]
        [ManagedEvent(name="SAVE_MODULE")]
        [ManagedEvent(name="DELETE_MODULE")]
        [ManagedEvent(name="LOAD_MODULE")]
        [ManagedEvent(name="UNLOAD_MODULE")]
        [ManagedEvent(name="SAVE_STARTUP_ORDERS")]
        [ResourceBundle("appMain")]
        [ResourceBundle("appError")]
    </mx:Metadata>

    <mx:states>
        <mx:State name="selectedLoaded">
        	<mx:SetStyle target="{loadBtn}" name="icon" value="{stopIcon}" />
            <mx:SetProperty target="{loadBtn}" name="toolTip" value="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_module_unload')}" />
        </mx:State>
        <mx:State name="selectedUnLoaded">
        	<mx:SetStyle target="{loadBtn}" name="icon" value="{startIcon}" />
            <mx:SetProperty target="{loadBtn}" name="toolTip" value="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_module_load')}" />
        </mx:State>
    </mx:states>

    <mx:Script>
        <![CDATA[
        	import mx.collections.SortField;
        	import mx.collections.Sort;
            import mx.collections.ArrayCollection;
            import mx.events.ListEvent;
            import mx.events.DragEvent;

            import org.granite.tide.spring.Identity;
            
            import org.openwms.core.domain.Module;
            import org.openwms.web.flex.client.event.ApplicationEvent;
            import org.openwms.web.flex.client.model.ModelLocator;
            import org.openwms.web.flex.client.util.I18nUtil;

            [Inject]
            [Bindable]
            /**
             * Inject identity to ensure security.
             */
            public var identity : Identity;
            
            [Inject]
            [Bindable]
            /**
             * Inject a model.
             */
            public var modelLocator : ModelLocator; 
            
            [Bindable]
			[Embed(source="/assets/images/Module--start.png")] 
            /**
             * Icon for button when module is ready to be started.
             */
     		public var startIcon : Class;
            [Bindable] 
            [Embed(source="/assets/images/Module--stop.png")] 
            /**
             * Icon for button when module is started and can be stopped.
             */
     		public var stopIcon : Class;
            [Bindable] 
            [Embed(source="/assets/images/Module--disabled.png")] 
            /**
             * Icon for button when the state of the module is undefined or no module is selected.
             */
            public var disabledIcon : Class;
            
            [Observer("MODULE_UNLOADED")]
            /**
             * After a Module was unloaded as well as after this screen was created, we check the state of the Module
             * to set the button icon properly.
             *
             * @param event Unused
             */
            public function onUnloaded(event : ApplicationEvent = null) : void {
                checkState();
            }
            
            [Observer("MODULE_LOADED")]
            /**
             * After a Module was loaded as well as after this screen was created, we check the state of the Module
             * to set the button icon properly.
             *
             * @param event Unused
             */
            public function onLoaded(event : ApplicationEvent = null) : void {
                checkState();
            }
            
            private function init() : void {
                newBtn.enabled = true;
                saveBtn.enabled = false;
                deleteBtn.enabled = false;
                enableTextFields(false);
                checkState();
            }
            
            private function newModule() : void {
                var module:Module = new Module();
                modelLocator.selectedModule = module;
                saveBtn.enabled = true;
                deleteBtn.enabled = true;
                newBtn.enabled = false;
                enableTextFields(true);
                moduleNameTxt.setFocus();
            }

            private function checkState() : void {
                if (modelLocator == null || loadBtn == null) {
                    return;
                }
                if (modelLocator.selectedModule != null && modelLocator.selectedModule.loaded) {
                    loadBtn.setStyle("icon", stopIcon);
                } else if(modelLocator.selectedModule != null && !modelLocator.selectedModule.loaded) {
                    loadBtn.setStyle("icon", startIcon);
                } else {
                    loadBtn.setStyle("icon", disabledIcon);
                }
            }

            private function saveModule() : void {
                saveBtn.enabled = false;
                newBtn.enabled = true;
                var e:ApplicationEvent = new ApplicationEvent(ApplicationEvent.SAVE_MODULE);
                e.data = modelLocator.selectedModule;
                dispatchEvent(e);
                newBtn.setFocus();
            }
            
            private function deleteModule() : void {
                if (modelLocator.selectedModule != null) {
                    if (!isNaN(modelLocator.selectedModule.id)) {
                        // Persisted instance
                        var e:ApplicationEvent = new ApplicationEvent(ApplicationEvent.DELETE_MODULE);
                        e.data = modelLocator.selectedModule;
                        dispatchEvent(e);
                    }
                    modelLocator.selectedModule = null;
                    enableTextFields(false);
                    saveBtn.enabled = false;
                    deleteBtn.enabled = false;
                    newBtn.enabled = true;
                    modulesGrid.setFocus();
                }
            }
            
            private function loadModule() : void {
                if (modelLocator.selectedModule != null) {
                    var e : ApplicationEvent;
                    if (modelLocator.selectedModule.loaded) {
                        e = new ApplicationEvent(ApplicationEvent.UNLOAD_MODULE);
                        e.data = modelLocator.selectedModule;
                        dispatchEvent(e);
                    } else {
                        e = new ApplicationEvent(ApplicationEvent.LOAD_MODULE);
                        e.data = modelLocator.selectedModule;
                        dispatchEvent(e);
                    }
                }
            }

            private function enableTextFields(enable : Boolean) : void {
                moduleNameTxt.enabled = enable;
                urlTxt.enabled = enable;
                descriptionTxt.enabled = enable;
            }
            
            private function onChange() : void {
                saveBtn.enabled = true;
            }

            private function onRowClick(event : ListEvent) : void {
                modelLocator.selectedModule = (event.currentTarget.selectedItem) as Module;
                currentState = (modelLocator.selectedModule.loaded ? 'selectedLoaded' : 'selectedUnLoaded');
                enableTextFields(true);
                deleteBtn.enabled = true;
                checkState();
            }
            
            private function onDragComplete(event : DragEvent) : void {
                var value : Object = event.dragSource.dataForFormat('items');
                var index : int = modulesGrid.calculateDropIndex(event);
                if (value != null) {
                    modelLocator.selectedModule = getModule(value.toString());
                    modelLocator.selectedModule.startupOrder = index;
                    var sort:Sort = new Sort();
                    sort.fields = [new SortField("startupOrder")];
                    modelLocator.allModules.sort = sort;
                    modelLocator.allModules.refresh();
                    if (modelLocator.selectedModule != null) {
	                    var e:ApplicationEvent = new ApplicationEvent(ApplicationEvent.SAVE_STARTUP_ORDERS);
	                    e.data = recalculateOrder(modulesGrid.dataProvider as ArrayCollection);
	                    dispatchEvent(e);
                    }
                }
            }
            
            private function recalculateOrder(modules : ArrayCollection) : ArrayCollection {
            	for (var i : int = 0; i < modules.length; i++) {
            		(modules[i] as Module).startupOrder = i;
            	}
            	return modules;
            }
            
            private function getModule(module : String) : Module {
                for each (var m : Module in modelLocator.allModules) {
                    if (m.moduleName == module) {
                        return m;
                    }
                }
                return null;
            }
            
            private function isLoadEnabled() : Boolean {
            trace("in role:"+identity.ifAllGranted('APP_load_module_button'));
            trace("cond:"+!(modelLocator.selectedModule == null || modelLocator.selectedModule.moduleName == ''));
                return identity.ifAllGranted('APP_load_module_button') && !(modelLocator.selectedModule == null || modelLocator.selectedModule.moduleName == '');
            }
        ]]>
    </mx:Script>

    <mx:Binding source="moduleNameTxt.text" destination="modelLocator.selectedModule.moduleName" />
    <mx:Binding source="urlTxt.text" destination="modelLocator.selectedModule.url" />
    <mx:Binding source="descriptionTxt.text" destination="modelLocator.selectedModule.description" />
    <mx:Binding source="loadOnStartupChk.selected" destination="modelLocator.selectedModule.loadOnStartup" />

    <mx:StringValidator minLength="1" tooShortError="{I18nUtil.trans(I18nUtil.APP_ERROR, 'error_module_moduleName_required')}" source="{moduleNameTxt}" required="true" property="text"/>
    <mx:StringValidator minLength="1" tooShortError="{I18nUtil.trans(I18nUtil.APP_ERROR, 'error_module_url_required')}" source="{urlTxt}" required="true" property="text"/>
		<mx:HBox x="10" y="10" width="95%" verticalAlign="middle" backgroundColor="#EAFF00" backgroundAlpha="0.5">
		    <mx:Label x="10" y="10" text="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_module_screen_header')}" fontSize="24"/>
		    <mx:VRule height="10" />
		    <mx:Button id="newBtn" enabled="{identity.ifAllGranted('APP_add_module_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_module_add')}" icon="@Embed(source='/assets/images/Module--add.png')" click="newModule()" />
		    <mx:VRule height="10" />
		    <mx:Button id="deleteBtn" enabled="{identity.ifAllGranted('APP_delete_module_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_module_delete')}" icon="@Embed(source='/assets/images/Module--minus.png')" click="deleteModule()"/>
		    <mx:VRule height="10" />
		    <mx:Button id="saveBtn" enabled="{identity.ifAllGranted('APP_save_module_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_module_save')}" icon="@Embed(source='/assets/images/Module--save.png')" click="saveModule()"/>
		    <mx:VRule height="10" />
		    <mx:Button id="loadBtn" enabled="{identity.ifAllGranted('APP_load_module_button') &amp;&amp; !(modelLocator.selectedModule == null || modelLocator.selectedModule.moduleName == '')}" buttonMode="true" mouseChildren="false" click="loadModule()" />
		</mx:HBox>
		<mx:HRule x="9" y="53" width="95%"/>
		<mx:VBox width="95%" x="10" y="63">
				<mx:Canvas height="255" backgroundColor="#EAFF00" backgroundAlpha="0.5" width="100%">
					<mx:List id="modulesGrid" dataProvider="{modelLocator.allModules}" labelField="moduleName" dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" dragDrop="onDragComplete(event);" width="300" x="10" y="10" height="235" itemClick="onRowClick(event)" />
					<mx:Canvas height="235" x="318" y="10">
    					<mx:Form width="100%">
    						<mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_module_moduleName')}" required="true" x="10" y="10" >
    						    <mx:TextInput id="moduleNameTxt" x="95" y="8" width="301" change="onChange()" text="{modelLocator.selectedModule.moduleName}" />
    						</mx:FormItem>
    						<mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_module_url')}" required="true" x="10" y="40" >
    							<mx:TextInput id="urlTxt" x="95" y="38" width="301" change="onChange()" text="{modelLocator.selectedModule.url}" />
    						         </mx:FormItem>
    					          <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_module_description')}" x="10" y="70" >
    					          <mx:TextInput id="descriptionTxt" x="95" y="68" width="301" change="onChange()" text="{modelLocator.selectedModule.description}" />
    					          </mx:FormItem>
    					          <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'lbl_module_loadOnStartup')}" x="10" y="100" >
    					              <mx:CheckBox id="loadOnStartupChk" change="onChange()" x="95" y="98" selected="{modelLocator.selectedModule.loadOnStartup}"/>
    					          </mx:FormItem>
    					</mx:Form>
    					<mx:Label x="10" y="142" text="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_module_info_text')}" width="100%" height="100%"/>
					</mx:Canvas>
				</mx:Canvas>
		</mx:VBox>
</mx:Canvas>
