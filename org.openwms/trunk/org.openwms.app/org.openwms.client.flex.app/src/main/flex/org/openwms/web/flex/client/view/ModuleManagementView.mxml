<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundAlpha="0.0" creationComplete="init()">

    <mx:Metadata>
        [Name("moduleManagementView")]
        [ManagedEvent(name="SAVE_MODULE")]
        [ManagedEvent(name="DELETE_MODULE")]
        [ManagedEvent(name="LOAD_MODULE")]
        [ManagedEvent(name="UNLOAD_MODULE")]
        [ManagedEvent(name="SAVE_STARTUP_ORDERS")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        	import mx.collections.SortField;
        	import mx.collections.Sort;
            
            import mx.collections.ArrayCollection;
            import org.openwms.core.domain.Module;
            import org.openwms.web.flex.client.event.ApplicationEvent;
            import org.openwms.web.flex.client.model.ModelLocator;
            import mx.events.ListEvent;
            import mx.events.DragEvent;
            import org.granite.tide.spring.Identity;

            [In]
            [Bindable]
            /**
             * We need to have Granites Identity injected.
             */
            public var identity:Identity;
            
            /**
             * We want to operate on the model.
             */
            [In]
            [Bindable]
            public var modelLocator:ModelLocator; 
                       
            private function init():void {
                newBtn.enabled = true;
                saveBtn.enabled = false;
                deleteBtn.enabled = false;
                enableTextFields(false);
            }
            
            private function newModule():void {
                var module:Module = new Module();
                modelLocator.selectedModule = module;
                saveBtn.enabled = true;
                deleteBtn.enabled = true;
                newBtn.enabled = false;
                enableTextFields(true);
                moduleNameTxt.setFocus();
            }

            private function saveModule():void {
                saveBtn.enabled = false;
                newBtn.enabled = true;
                var e:ApplicationEvent = new ApplicationEvent(ApplicationEvent.SAVE_MODULE);
                e.data = modelLocator.selectedModule;
                dispatchEvent(e);
                newBtn.setFocus();
            }
            
            private function deleteModule():void {
                if (modelLocator.selectedModule != null) {
                    trace("Delete Module: "+modelLocator.selectedModule.moduleName);
                    if (!isNaN(modelLocator.selectedModule.id)) {
                        // Persisted instance
                        var e:ApplicationEvent = new ApplicationEvent(ApplicationEvent.DELETE_MODULE);
                        e.data = modelLocator.selectedModule;
                        dispatchEvent(e);
                    }
                    modelLocator.selectedModule = null;
                    enableTextFields(false);
                    saveBtn.enabled = false;
                    deleteBtn.enabled = false;
                    newBtn.enabled = true;
                    modulesGrid.setFocus();
                }
            }
            
            private function loadModule():void {
                if (modelLocator.selectedModule != null) {
                    var e:ApplicationEvent;
                    if (modelLocator.selectedModule.loaded) {
                        trace("Unloading Module : "+modelLocator.selectedModule);
                        e = new ApplicationEvent(ApplicationEvent.UNLOAD_MODULE);
                        e.data = modelLocator.selectedModule;
                        dispatchEvent(e);
                    } else {
                        trace("Loading Module : "+modelLocator.selectedModule);
                        e = new ApplicationEvent(ApplicationEvent.LOAD_MODULE);
                        e.data = modelLocator.selectedModule;
                        dispatchEvent(e);
                    }
                }
            }

            private function enableTextFields(enable:Boolean):void {
                moduleNameTxt.enabled = enable;
                urlTxt.enabled = enable;
                descriptionTxt.enabled = enable;
            }
            
            private function onChange():void {
                saveBtn.enabled = true;
            }

            private function onRowClick( event:ListEvent ):void {
                modelLocator.selectedModule = (event.currentTarget.selectedItem) as Module;
                enableTextFields(true);
                deleteBtn.enabled = true;
            }
            
            private function onDragComplete(event:DragEvent):void {
                var value:Object = event.dragSource.dataForFormat('items');
                var index:int = modulesGrid.calculateDropIndex(event);
                if (value != null) {
                	trace("Setting startup order : "+index+" for module:"+value);
                    modelLocator.selectedModule = getModule(value.toString());
                    modelLocator.selectedModule.startupOrder = index;
                    var sort:Sort = new Sort();
                    sort.fields = [new SortField("startupOrder")];
                    modelLocator.allModules.sort = sort;
                    modelLocator.allModules.refresh();
                    if (modelLocator.selectedModule != null) {
                    	trace("Diff:"+Math.abs(index-modelLocator.selectedModule.startupOrder));
	                    var e:ApplicationEvent = new ApplicationEvent(ApplicationEvent.SAVE_STARTUP_ORDERS);
	                    e.data = recalculateOrder(modulesGrid.dataProvider as ArrayCollection);
	                    dispatchEvent(e);
                    }
                }
            }
            
            private function recalculateOrder(modules:ArrayCollection):ArrayCollection {
            	for (var i:int = 0; i < modules.length; i++) {
            		(modules[i] as Module).startupOrder = i;
            	}
            	return modules;
            }
            
            private function getModule(module:String):Module {
                for each (var m:Module in modelLocator.allModules) {
                	trace("searching:"+m);
                    if (m.moduleName == module) {
                    	trace("found:"+m);
                        return m;
                    }
                }
                trace("Not found return : "+module);
                return null;
            }

        ]]>
    </mx:Script>

    <mx:Binding source="moduleNameTxt.text" destination="modelLocator.selectedModule.moduleName" />
    <mx:Binding source="urlTxt.text" destination="modelLocator.selectedModule.url" />
    <mx:Binding source="descriptionTxt.text" destination="modelLocator.selectedModule.description" />
    <mx:Binding source="loadOnStartupChk.selected" destination="modelLocator.selectedModule.loadOnStartup" />

    <mx:StringValidator minLength="1" tooShortError="Modulename is required" source="{moduleNameTxt}" required="true" property="text"/>
    <mx:StringValidator minLength="1" tooShortError="URL is required" source="{urlTxt}" required="true" property="text"/>
		<mx:HBox x="10" y="10" width="95%" verticalAlign="middle" backgroundColor="#EAFF00" backgroundAlpha="0.5">
		    <mx:Label x="10" y="10" text="Modules" fontSize="24"/>
		</mx:HBox>
		<mx:HRule x="9" y="53" width="95%"/>
		<mx:VBox width="95%" x="10" y="63">
				<mx:Canvas height="255" backgroundColor="#EAFF00" backgroundAlpha="0.5" width="100%">
					<mx:List id="modulesGrid" dataProvider="{modelLocator.allModules}" labelField="moduleName" dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" dragDrop="onDragComplete(event);" width="300" x="10" y="10" height="235" itemClick="onRowClick(event)" />
					<mx:Canvas height="235" x="318" y="10">
					<mx:Form width="100%">
						<mx:FormItem label="Modulename" required="true" x="10" y="10" >
						    <mx:TextInput id="moduleNameTxt" x="95" y="8" width="301" change="onChange()" text="{modelLocator.selectedModule.moduleName}" />
						</mx:FormItem>
						<mx:FormItem label="URL" required="true" x="10" y="40" >
							<mx:TextInput id="urlTxt" x="95" y="38" width="301" change="onChange()" text="{modelLocator.selectedModule.url}" />
						         </mx:FormItem>
					          <mx:FormItem label="Description" x="10" y="70" >
					          <mx:TextInput id="descriptionTxt" x="95" y="68" width="301" change="onChange()" text="{modelLocator.selectedModule.description}" />
					          </mx:FormItem>
					          <mx:FormItem label="Load on Startup" x="10" y="100" >
					              <mx:CheckBox id="loadOnStartupChk" change="onChange()" x="95" y="98" selected="{modelLocator.selectedModule.loadOnStartup}"/>
					          </mx:FormItem>
					</mx:Form>
					      <mx:Button id="newBtn" label="New" x="10" y="140" click="newModule()" />
					      <mx:Button id="saveBtn" label="Save" x="67" y="140" click="saveModule()"/>
					      <mx:Button id="deleteBtn" label="Delete" x="129" y="140" click="deleteModule()"/>
					      <mx:Button id="loadBtn" label="{(modelLocator.selectedModule == null || modelLocator.selectedModule.loaded) ? 'Unload' : 'Load'}" x="200" y="140" click="loadModule()" enabled="{(modelLocator.selectedModule == null || modelLocator.selectedModule.moduleName == '') ? false : true}"/>
					</mx:Canvas>
				</mx:Canvas>
		</mx:VBox>
</mx:Canvas>
