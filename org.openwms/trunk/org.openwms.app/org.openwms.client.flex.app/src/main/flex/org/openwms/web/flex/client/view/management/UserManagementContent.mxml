<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" styleName="frameContainerSkin"
 creationComplete="onCreated();" implements="org.openwms.web.flex.client.IObservable">

    <mx:Metadata>
        [Name]
        [ManagedEvent(name="ADD_USER")]
        [ManagedEvent(name="SAVE_USER")]
        [ManagedEvent(name="DELETE_USER")]
        [ManagedEvent(name="LOAD_ALL_USERS")]
        [ManagedEvent(name="LOAD_ALL_ROLES")]
        [ResourceBundle("appMain")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
            import org.openwms.web.flex.client.event.RoleEvent;
            import org.openwms.core.domain.system.usermanagement.Role;
            import org.openwms.web.flex.client.view.dialogs.AssignRoleDialog;
            import org.openwms.web.flex.client.view.dialogs.AssignUsersDialog;
            import flash.utils.ByteArray;
            import mx.formatters.Formatter;
            import mx.utils.ObjectUtil;
            import mx.effects.Blur;
            import mx.events.ValidationResultEvent;
            import mx.managers.PopUpManager;
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.core.BitmapAsset;
            import mx.validators.RegExpValidationResult;

            import org.granite.tide.spring.Identity;

            import org.openwms.core.domain.system.usermanagement.User;
            import org.openwms.core.domain.system.usermanagement.UserDetails$SEX;
            import org.openwms.web.flex.client.event.UserEvent;
            import org.openwms.web.flex.client.util.UserHelper;
            import org.openwms.web.flex.client.model.ModelLocator;
            import org.openwms.web.flex.client.util.DisplayUtility;
            import org.openwms.web.flex.client.util.BindingProperty;
            import org.openwms.web.flex.client.util.ValidationUtil;
            import org.openwms.web.flex.client.view.dialogs.FileUploadDialog;
            import org.openwms.web.flex.client.view.dialogs.ChangePasswordDialog;
            import org.openwms.web.flex.client.util.I18nUtil;

            [Inject]
            [Bindable]
            /**
             * Inject identity to ensure security.
             */
            public var identity : Identity;
            [Inject]
            [Bindable]
            /**
             * Inject the model.
             */
            public var modelLocator : ModelLocator;

            [Bindable]
            [Embed(source="/assets/images/userDefaultUniSex.jpg")]
            private var uniSexImage : Class;
            [Bindable]
            [Embed(source="/assets/images/userDefaultMan.jpg")]
            private var manImage : Class;
            [Bindable]
            [Embed(source="/assets/images/userDefaultWoman.jpg")]
            private var womanImage : Class;
            private var filter : DropShadowFilter = new DropShadowFilter(6, 45, 0x202020, 0.5, 4, 4, 1, 2, false);

            [Observer("USER.USER_SAVED")]
            /**
             * After creation do some minor setup and enable form fields.
             * Tide event observers : USER.USER_SAVED
             *
             * @param event Unused
             */
            public function onCreated(event : UserEvent = null) : void {
                if (modelLocator.allRoles.length == 0) {
                    dispatchEvent(new RoleEvent(RoleEvent.LOAD_ALL_ROLES));
                }
                userImg.filters = [filter];
                setFormElements(!(modelLocator.selectedUser == null));
            }
            
            [Observer("USER.SELECTION_CHANGED")]
            /**
             * Called when a new User was chosen.
             * Tide event observers : USER.SELECTION_CHANGED
             *
             * @param event Unused
             */
            public function onUserSelectionChanged(event : UserEvent = null) : void {
                userImg.filters = [filter];
                setFormElements(!(modelLocator.selectedUser == null));
                if (modelLocator.selectedUser != null) {
                    if (modelLocator.selectedUser.userDetails.sex == null) {
                        this.sexRb.selection = null;
                    }
                }
            }

            [Deprecated]
            [Observer("USER.USER_ADDED")]
            /**
             * After an user was added, enable form fields. When GraniteDS accepts multiple
             * observer events on one method this method will be removed (GDS bug).
             * Tide event observers : USER.USER_ADDED
             */
            public function onUserAdded(event : Event) : void {
                setFormElements(!(modelLocator.selectedUser == null));
            }

            /**
             * Callback method. To be called when a new user image was saved.
             *
             * @see org.openwms.web.flex.client.IObserver#notify()
             */
            public function notify() : void {
                refresh();
            }

            private function showFileUploadDialog() : void {
                if (modelLocator.selectedUser == null || isNaN(modelLocator.selectedUser.id)) {
                    Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_user_save_user_before"));
                    return;
                }
                var pop1 : FileUploadDialog = FileUploadDialog(PopUpManager.createPopUp(this, FileUploadDialog, true));
                pop1.callback = this;
                PopUpManager.centerPopUp(pop1);
            }
            
            private function refresh() : void {
                dispatchEvent(new UserEvent(UserEvent.LOAD_ALL_USERS));
            }

            private function addUser() : void {
                dispatchEvent(new UserEvent(UserEvent.ADD_USER));
                usernameTi.setFocus();
            }

            private function deleteUser() : void {
                if (modelLocator.selectedUser == null) {
                    Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_user_save_user_before"));
                    return;
                }
                if (isNaN(modelLocator.selectedUser.id)) {
                    modelLocator.selectedUser = null;
                    modelLocator.selectedUser = modelLocator.allUsers.getItemAt(0) as User;
                    return;
                }
                dispatchEvent(new UserEvent(UserEvent.DELETE_USER));
            }
            
            private function fireSaveUserEvent() : void {
                if (modelLocator.selectedUser != null && stringVal.validate().type == ValidationResultEvent.VALID && checkExpirationDate()) {
                    var bindings : Array = [new BindingProperty(modelLocator.selectedUser, "username", usernameTi, "text"),
                                            new BindingProperty(modelLocator.selectedUser, "fullname", fullnameTi, "text"),  
                                            new BindingProperty(modelLocator.selectedUser.userDetails, "description", descriptionTi, "text"),  
                                            new BindingProperty(modelLocator.selectedUser.userDetails, "phoneNo", phoneNoTi, "text"),
                                            new BindingProperty(modelLocator.selectedUser.userDetails, "skypeName", skypeNameTi, "text"),
                                            new BindingProperty(modelLocator.selectedUser.userDetails, "department", departmentTi, "text"),
                                            new BindingProperty(modelLocator.selectedUser.userDetails, "office", officeTi, "text"),
                                            new BindingProperty(modelLocator.selectedUser.userDetails, "comment", tiComment, "text"),
                                            new BindingProperty(modelLocator.selectedUser, "enabled", enabledChk, "selected"),
                                            new BindingProperty(modelLocator.selectedUser, "locked", lockedChk, "selected")];
                    DisplayUtility.bindProperties(new ArrayCollection(bindings),
                        function execute():void {
                            var event : UserEvent = new UserEvent(UserEvent.SAVE_USER);
                            event.data = modelLocator.selectedUser;
                            dispatchEvent(event);
                        }
                    );
                }
            }

            private function setFormElements(value : Boolean = true) : void {
                deleteUserBtn.enabled = value;
                saveUserBtn.enabled = value;
                changePasswordBtn.enabled = value;
                changePictureBtn.enabled = value;
                usernameTi.editable = value;
                fullnameTi.editable = value;
                descriptionTi.editable = value;
                phoneNoTi.editable = value;
                skypeNameTi.editable = value;
                departmentTi.editable = value;
                officeTi.editable = value;
                tiComment.editable = value;
                enabledChk.enabled = value;
                lockedChk.enabled = value;
            }

            private function checkExpirationDate() : Boolean {
                if (expirationDateDt == null || expirationDateDt.selectedDate == null) {
                	if (modelLocator.selectedUser != null) {
                        modelLocator.selectedUser.expirationDate = null;
                    }
                    return true;
                }
                if (modelLocator.selectedUser != null && 
                    ValidationUtil.validateAndFormat(expirationDateDt, dateVal) &&
                    ObjectUtil.dateCompare(ModelLocator.today(), expirationDateDt.selectedDate) < 1) {
                        modelLocator.selectedUser.expirationDate = expirationDateDt.selectedDate;
                        return true;
                }
                Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_user_valid_expiration_date"));
                return false;
            }

            private function showChangePasswordDialog() : void {
                if (modelLocator.selectedUser == null || isNaN(modelLocator.selectedUser.id)) {
                    Alert.show(I18nUtil.trans(I18nUtil.APP_MAIN, "info_user_save_user_before"));
                } else {
                    var pop : ChangePasswordDialog = ChangePasswordDialog(PopUpManager.createPopUp(this, ChangePasswordDialog, true));
                    PopUpManager.centerPopUp(pop);
                }
            }

            private function setEditable(event : Event) : void {
                event.currentTarget.editable = true;
            }
            
            private function setUserImage() : void {
                var asset : BitmapAsset;
                if (modelLocator.selectedUser != null) {
                    var user : User = modelLocator.selectedUser;
                    if (UserHelper.hasDetails(user)) {
                        if (user.userDetails.image != null) {
                            asset = modelLocator.selectedUser.userDetails.image as BitmapAsset;
                        } else if (user.userDetails.sex == UserDetails$SEX.MALE) {
                            asset = new manImage() as BitmapAsset;
                        } else if (user.userDetails.sex == UserDetails$SEX.FEMALE) {
                            asset = new womanImage() as BitmapAsset;
                        } else {
                            return;
                        }
                    } else {
                        asset = new uniSexImage() as BitmapAsset;
                    }
                } else {
                    asset = new uniSexImage() as BitmapAsset;
                }
                userImg.source = asset;
                userImg.invalidateDisplayList();
                userImg.initialize();
            }
            
            private function addRole() : void {
                var pop : AssignRoleDialog = AssignRoleDialog(PopUpManager.createPopUp(this, AssignRoleDialog, true));
                var rolesToAssign : ArrayCollection = new ArrayCollection(modelLocator.allRoles.toArray());
                for each (var role : Role in modelLocator.selectedUser.roles) {
                    rolesToAssign.removeItemAt(rolesToAssign.getItemIndex(role));
                }
                pop.items = rolesToAssign;
                PopUpManager.centerPopUp(pop);
            }

            private function removeRole() : void {
                
            }
        ]]>
    </mx:Script>

    <mx:Binding source="sexRb.selection.value as UserDetails$SEX" destination="modelLocator.selectedUser.userDetails.sex"/>
    <mx:DateValidator id="dateVal" property="selectedDate" inputFormat="{ModelLocator.SIMPLE_DT_FORMAT}"/>
    <mx:StringValidator id="stringVal" minLength="1" source="{usernameTi}" property="text"/>

    <mx:HBox width="95%" verticalAlign="middle" backgroundColor="#B6CFEF" x="10" y="10">
        <mx:Label text="{I18nUtil.trans(I18nUtil.APP_MAIN, 'txt_user_screen_header')}" fontSize="24"/>
        <mx:VRule height="10"/>
        <mx:Button id="addUserBtn" enabled="{identity.ifAllGranted('APP_add_user_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_user_add_user')}" icon="@Embed(source='/assets/images/User--plus.png')" click="addUser()"/>
        <mx:VRule height="10"/>
        <mx:Button id="deleteUserBtn" enabled="{identity.ifAllGranted('APP_delete_user_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_user_delete_user')}" icon="@Embed(source='/assets/images/User--minus.png')" click="deleteUser();"/>
        <mx:VRule height="10"/>
        <mx:Button id="saveUserBtn" enabled="{identity.ifAllGranted('APP_save_user_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_user_save_user')}" icon="@Embed(source='/assets/images/User--save.png')" click="fireSaveUserEvent()"/>
        <mx:VRule height="10"/>
        <mx:Button id="refreshUserBtn" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_user_reload_users')}" icon="@Embed(source='assets/images/icons/refresh.png')" click="refresh()"/>
        <mx:VRule height="10"/>
        <mx:Button id="changePasswordBtn" enabled="{identity.ifAllGranted('APP_change_user_pw_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_user_change_users_password')}" icon="@Embed(source='assets/images/icons/key--edit.png')" click="showChangePasswordDialog()"/>
        <mx:VRule height="10"/>
        <mx:Button id="changePictureBtn" enabled="{identity.ifAllGranted('APP_change_user_picture_button')}" buttonMode="true" mouseChildren="false" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_user_change_users_image')}" icon="@Embed(source='assets/images/icons/picture--edit.png')" click="showFileUploadDialog()"/>
    </mx:HBox>
    <mx:HRule x="9" y="53" width="95%"/>
    <mx:Canvas x="10" y="63" width="95%" height="100%" backgroundColor="#B6CFEF">
        <mx:Canvas x="10" y="10" height="100%" width="100%">
            <mx:Image id="userImg" source="{modelLocator.selectedUser.userDetails.image}" width="100" height="150" click="showFileUploadDialog()" x="10" y="10" toolTip="{I18nUtil.trans(I18nUtil.APP_MAIN, 'ttip_user_change_users_image')}"/>
            <mx:VRule x="118" y="10" height="540"/>
            <mx:Form x="128" y="10">
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_username')}" required="true" width="100%">
                    <mx:TextInput id="usernameTi" text="{modelLocator.selectedUser.username}" click="setEditable(event)" width="250"/>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_fullname')}" required="false" width="100%" y="30">
                    <mx:TextInput id="fullnameTi" text="{modelLocator.selectedUser.fullname}" width="250"/>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_description')}" required="false" width="100%" y="60">
                    <mx:TextArea id="descriptionTi" text="{modelLocator.selectedUser.userDetails.description}" width="250"/>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_phone')}" required="false" width="100%">
                    <mx:TextInput id="phoneNoTi" text="{modelLocator.selectedUser.userDetails.phoneNo}" width="250"/>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_skypeName')}" required="false" width="100%">
                    <mx:TextInput id="skypeNameTi" text="{modelLocator.selectedUser.userDetails.skypeName}" width="250"/>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_department')}" required="false" width="100%">
                    <mx:TextInput id="departmentTi" text="{modelLocator.selectedUser.userDetails.department}" width="250"/>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_office')}" required="false" width="100%">
                    <mx:TextInput id="officeTi" text="{modelLocator.selectedUser.userDetails.office}" width="250"/>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_sex')}" width="100%">
                    <mx:Tile width="250" direction="vertical">
                        <mx:RadioButtonGroup id="sexRb" selectedValue="{modelLocator.selectedUser.userDetails.sex}"/>
                        <mx:RadioButton value="{UserDetails$SEX.MALE}" label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_sex_male')}" group="{sexRb}"/>
                        <mx:RadioButton value="{UserDetails$SEX.FEMALE}" label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_sex_female')}" group="{sexRb}"/>
                    </mx:Tile>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_comment')}" required="false" width="100%">
                    <mx:TextArea id="tiComment" text="{modelLocator.selectedUser.userDetails.comment}" width="250"/>
                </mx:FormItem>
                <mx:FormItem required="false" width="100%">
                    <mx:CheckBox id="enabledChk" label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_enabled')}" selected="{modelLocator.selectedUser.enabled}"/>
                </mx:FormItem>
                <mx:FormItem required="false" width="100%">
                    <mx:CheckBox id="lockedChk" label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_locked')}" selected="{modelLocator.selectedUser.locked}"/>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_expirationDate')}" required="false" width="100%">
                    <mx:DateField id="expirationDateDt" editable="true" selectableRange="{{rangeStart : new Date()}}" formatString="{ModelLocator.SIMPLE_DT_FORMAT}" width="250" selectedDate="{modelLocator.selectedUser == null ? null : modelLocator.selectedUser.expirationDate}"/>
                </mx:FormItem>
                <mx:FormItem label="{I18nUtil.trans(I18nUtil.APP_MAIN, 'entity_user_roles')}" required="false" width="100%">
                    <mx:HBox width="240" horizontalGap="0">
                        <mx:List labelField="name" dataProvider="{modelLocator.selectedUser.roles}" width="100%" height="63" alternatingItemColors="[#EEEEEE, #FFFFFF]"/>
                        <mx:VBox height="100%" width="16" verticalAlign="middle">
                            <mx:Image click="addRole();" enabled="{modelLocator.allRoles.length > 0}" height="16" width="16" buttonMode="true" mouseChildren="false" source="@Embed(source='assets/images/icons/plus.png')"/>
                            <mx:Image click="removeRole();" enabled="{modelLocator.allRoles.length > 0}" height="16" width="16" buttonMode="true" mouseChildren="false" source="@Embed(source='assets/images/icons/minus.png')"/>
                        </mx:VBox>
                    </mx:HBox>                    
                </mx:FormItem>
            </mx:Form>
        </mx:Canvas>

    </mx:Canvas>
</mx:Canvas>
