<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * openwms.org, the Open Warehouse Management System.
 *
 * This file is part of openwms.org.
 *
 * openwms.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * openwms.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software. If not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" show="onShow();" backgroundColor="#C2DAEF">

    <mx:Metadata>
        [Name("transportOrderView")]
        [ManagedEvent(name="LOAD_TRANSPORT_ORDERS")]
        [ManagedEvent(name="LOAD_TRANSPORT_UNITS")]
        [ManagedEvent(name="LOAD_ALL_LOCATIONS")]
        [ManagedEvent(name="LOAD_ALL_LOCATION_GROUPS")]
    </mx:Metadata>

	<mx:Script>
    	<![CDATA[
    		import org.openwms.web.flex.client.model.ModelLocator;
    		import mx.collections.ArrayCollection;
    		import mx.controls.Alert;
    		import mx.controls.dataGridClasses.DataGridColumn;
    		import org.openwms.web.flex.client.common.event.LocationGroupEvent;
    		import org.openwms.web.flex.client.common.event.LocationEvent;
    		import org.openwms.web.flex.client.common.event.TransportUnitEvent;
    		import org.openwms.web.flex.client.common.model.CommonModelLocator;
    		import org.openwms.web.flex.client.tms.event.TransportOrderEvent;
    		import org.openwms.tms.domain.order.TransportOrder;
    		import org.openwms.web.flex.client.tms.model.TMSModelLocator;
    		import org.openwms.web.flex.client.tms.view.dialogs.CreateTransportOrderDialog;
            import org.openwms.web.flex.client.tms.view.dialogs.CancelTransportOrdersDialog;
            import org.openwms.web.flex.client.tms.view.dialogs.RedirectTransportOrderDialog;
            import mx.managers.PopUpManager;
            [Inject]
            [Bindable]
            public var modelLocator:ModelLocator;            
            [Inject]
            [Bindable]
            public var commonModelLocator:CommonModelLocator;            
    		[Inject]
    		[Bindable]
            public var tmsModelLocator:TMSModelLocator;
            
    		private function onShow():void {
                if (tmsModelLocator.allTransportOrders.length == 0) {
                    dispatchEvent(new TransportOrderEvent(TransportOrderEvent.LOAD_TRANSPORT_ORDERS));
                }
                if (commonModelLocator.allTransportUnits.length == 0) {
                    dispatchEvent(new TransportUnitEvent(TransportUnitEvent.LOAD_TRANSPORT_UNITS));
                }
                if (commonModelLocator.allLocations.length == 0) {
                    dispatchEvent(new LocationEvent(LocationEvent.LOAD_ALL_LOCATIONS));
                }
                if (commonModelLocator.allLocationGroups.length == 0) {
                    dispatchEvent(new LocationGroupEvent(LocationGroupEvent.LOAD_ALL_LOCATION_GROUPS));
                }
    		}
    		
            private function showCreateTransportOrderDialog():void {
                var pop1:CreateTransportOrderDialog=CreateTransportOrderDialog(PopUpManager.createPopUp(this, CreateTransportOrderDialog, true));
                PopUpManager.centerPopUp(pop1);
            }
            
            private function showCancelTransportOrdersDialog():void {
            	if (transportOrdersLst.selectedIndices.length == 0) {
                    Alert.show("Please select at least one Transport Order to delete");
                    return;             		
            	}
                var pop:CancelTransportOrdersDialog = CancelTransportOrdersDialog(PopUpManager.createPopUp(this, CancelTransportOrdersDialog, true));
                pop.messageText = "Delete selected Transport Units";
                pop.items = new ArrayCollection(transportOrdersLst.selectedItems);
                PopUpManager.centerPopUp(pop);
            }

            private function showRedirectTransportOrderDialog():void {
                var pop1:RedirectTransportOrderDialog = RedirectTransportOrderDialog(PopUpManager.createPopUp(this, RedirectTransportOrderDialog, true));
                pop1.items = new ArrayCollection(transportOrdersLst.selectedItems);
                PopUpManager.centerPopUp(pop1);
            }

            private function refresh():void {
                var event:TransportOrderEvent = new TransportOrderEvent(TransportOrderEvent.LOAD_TRANSPORT_ORDERS);
                dispatchEvent(event);
            }
            
            private function formatAsDate(item:Object, dg:DataGridColumn):String {
                trace("Date:"+item[dg.dataField]);
                if (item[dg.dataField] != null) {
                    return dateFormatter.format(item[dg.dataField]);
                }
                return "--";
            }

            private function formatAsString(item:Object, dg:DataGridColumn):String {
                if (item[dg.dataField] != null) {
                    return String(item[dg.dataField].toString());
                }
                return "--";
            }

            private function formatBarcode(item:Object, dg:DataGridColumn):String {
                if (item[dg.dataField] != null) {
                    return String(item[dg.dataField].barcode);
                }
                return "--";
            }

            private function formatLocationGroup(item:Object, dg:DataGridColumn):String {
                if (item[dg.dataField] != null) {
                    return String(item[dg.dataField].name);
                }
                return "--";
            }
            private function formatAsActualLocation(item:Object, dg:DataGridColumn):String {
                if (item[dg.dataField] != null) {
                    return String(item[dg.dataField].actualLocation);
                }
                return "--";
            }
    	]]>
	</mx:Script>
	
	<mx:DateFormatter id="dateFormatter" formatString="{CommonModelLocator.DT_FORMAT_STRING}"/>
	
	<mx:DataGrid id="transportOrdersLst" width="95%" height="400" allowMultipleSelection="true" dataProvider="{tmsModelLocator.allTransportOrders}" y="63" x="10">
		<mx:columns>
			<mx:DataGridColumn headerText="ID" dataField="id" width="{ModelLocator.WIDTH_ID}" />
            <mx:DataGridColumn headerText="Transport Unit" dataField="transportUnit" width="{CommonModelLocator.WIDTH_BARCODE}" labelFunction="formatBarcode" />
			<mx:DataGridColumn headerText="State" dataField="state" width="{TMSModelLocator.WIDTH_STATE}" labelFunction="formatAsString" />
			<mx:DataGridColumn headerText="Priority" dataField="priority" width="{TMSModelLocator.WIDTH_PRIORITY}" labelFunction="formatAsString" />
			<mx:DataGridColumn headerText="Source Location" dataField="sourceLocation" width="{CommonModelLocator.WIDTH_LOCATION}" labelFunction="formatAsString"/>
            <mx:DataGridColumn headerText="Current Location" dataField="transportUnit" width="{CommonModelLocator.WIDTH_LOCATION}" labelFunction="formatAsActualLocation" />
			<mx:DataGridColumn headerText="Target Location" dataField="targetLocation" width="{CommonModelLocator.WIDTH_LOCATION}" labelFunction="formatAsString" />
			<mx:DataGridColumn headerText="Target Location Group" dataField="targetLocationGroup" width="{CommonModelLocator.WIDTH_LOCATION_GROUP_NAME}" labelFunction="formatLocationGroup" />
			<mx:DataGridColumn headerText="Created" dataField="creationDate" width="{ModelLocator.WIDTH_DATETIME}" labelFunction="formatAsDate"/>
			<mx:DataGridColumn headerText="Started" dataField="startDate" width="{ModelLocator.WIDTH_DATETIME}" labelFunction="formatAsDate"/>
			<mx:DataGridColumn headerText="Finished" dataField="endDate" width="{ModelLocator.WIDTH_DATETIME}" labelFunction="formatAsDate"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:HBox x="10" y="10" verticalAlign="middle" width="95%" backgroundColor="#F9FBB7">
	    <mx:Label x="10" y="10" text="Transport Orders" fontSize="24"/>
	    <mx:VRule height="10"/>
	    <mx:Button id="createTransportOrderBtn" buttonMode="true" mouseChildren="false" toolTip="Create a new Transport Order" icon="@Embed(source='/assets/images/TransportOrder--Add.png')" click="showCreateTransportOrderDialog()"/>
        <mx:VRule height="10"/>
        <mx:Button id="cancelTransportOrderBtn" buttonMode="true" mouseChildren="false" toolTip="Change state of an existing Transport Order" icon="@Embed(source='/assets/images/TransportOrder--Cancel.png')" click="showCancelTransportOrdersDialog()" />
        <mx:VRule height="10"/>
        <mx:Button id="refreshTransportOrdersBtn" buttonMode="true" mouseChildren="false" toolTip="Refresh the list of Transport Orders" icon="@Embed(source='assets/images/icons/refresh.png')" click="refresh()" />
	    <mx:VRule height="10"/>
	    <mx:Button id="showTransportOrderHistoryBtn" buttonMode="true" mouseChildren="false" toolTip="Show history of a Transport Order" icon="@Embed(source='/assets/images/TransportOrder--History.png')" click="showCreateTransportOrderDialog()" />
	    <mx:VRule height="10"/>
	    <mx:Button id="redirectTransportOrderBtn" buttonMode="true" mouseChildren="false" toolTip="Redirect one or more Transport Orders" icon="@Embed(source='/assets/images/TransportOrder--Redirect.png')" click="showRedirectTransportOrderDialog()"/>
	    <mx:VRule height="10"/>
	    <mx:Button id="stateTransportOrderBtn" buttonMode="true" mouseChildren="false" toolTip="Change state of a Transport Order" icon="@Embed(source='/assets/images/TransportOrder--State.png')" click="showCreateTransportOrderDialog()" />
        <mx:VRule height="10"/>
        <mx:Button id="deleteTransportOrderBtn" buttonMode="true" mouseChildren="false" toolTip="Delete an existing Transport Order" icon="@Embed(source='/assets/images/TransportOrder--Delete.png')" click="showCancelTransportOrdersDialog()" />
	</mx:HBox>
	<mx:HRule x="10" y="53" width="95%"/>
</mx:Canvas>
